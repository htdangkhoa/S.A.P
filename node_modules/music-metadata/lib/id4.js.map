{"version":3,"file":"id4.js","sourceRoot":"","sources":["../src/id4.ts"],"names":[],"mappings":"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","sourcesContent":["import * as strtok from 'strtok2';\nimport common from './common';\nimport {IStreamParser, TagCallback} from './parser';\n\nenum State {\n  skip = -1,\n  atomLength = 0,\n  atomName = 1,\n  ilstAtom = 2,\n  mdhdAtom = 3\n}\n\nclass Id4Parser implements IStreamParser {\n\n  public static type = 'm4a';\n\n  public static getInstance(): Id4Parser {\n    return new Id4Parser();\n  }\n\n  private static Types: { [index: number]: string } = {\n    0: 'uint8',\n    1: 'text',\n    13: 'jpeg',\n    14: 'png',\n    21: 'uint8'\n  };\n\n  private static ContainerAtoms = ['moov', 'udta', 'meta', 'ilst', 'trak', 'mdia'];\n\n  public parse(stream, callback: TagCallback, done?, readDuration?, fileSize?) {\n    strtok.parse(stream, (v, cb) => {\n      // the very first thing we expect to see is the first atom's length\n      if (!v) {\n        cb.metaAtomsTotalLength = 0;\n        cb.state = 0;\n        return strtok.UINT32_BE;\n      }\n\n      switch (cb.state) {\n        case State.skip: // skip\n          cb.state = State.atomLength;\n          return strtok.UINT32_BE;\n\n        case State.atomLength: // atom length\n          cb.atomLength = v;\n          cb.state++;\n          return new strtok.BufferType(4);\n\n        case State.atomName: // atom name\n          v = v.toString('binary');\n          cb.atomName = v;\n\n          // meta has 4 bytes padding at the start (skip)\n          if (v === 'meta') {\n            cb.state = State.skip;\n            return new strtok.IgnoreType(4);\n          }\n\n          if (readDuration) {\n            if (v === 'mdhd') {\n              cb.state = State.mdhdAtom;\n              return new strtok.BufferType(cb.atomLength - 8);\n            }\n          }\n\n          if (!~Id4Parser.ContainerAtoms.indexOf(v)) {\n            if (cb.atomContainer === 'ilst') {\n              cb.state = State.ilstAtom;\n              return new strtok.BufferType(cb.atomLength - 8);\n            }\n            cb.state = State.skip;\n            return new strtok.IgnoreType(cb.atomLength - 8);\n          }\n\n          // dig into container atoms\n          cb.atomContainer = v;\n          cb.atomContainerLength = cb.atomLength;\n          cb.state--;\n          return strtok.UINT32_BE;\n\n        case State.ilstAtom: // ilst atom\n          cb.metaAtomsTotalLength += cb.atomLength;\n          const results = this.processMetaAtom(v, cb.atomName, cb.atomLength - 8);\n          if (results.length > 0) {\n            for (const result of results) {\n              callback(Id4Parser.type, cb.atomName, result);\n            }\n          }\n\n          // we can stop processing atoms once we get to the end of the ilst atom\n          if (cb.metaAtomsTotalLength >= cb.atomContainerLength - 8) {\n            return done();\n          }\n\n          cb.state = State.atomLength;\n          return strtok.UINT32_BE;\n\n        case State.mdhdAtom: // mdhd atom\n          // TODO: support version 1\n          const sampleRate = v.readUInt32BE(12);\n          const duration = v.readUInt32BE(16);\n          callback('format', 'duration', duration / sampleRate);\n          callback('format', 'sampleRate', sampleRate); // ToDo: add to test\n          cb.state = State.atomLength;\n          return strtok.UINT32_BE;\n\n        default:\n          return done(new Error('illegal state:' + cb.state));\n\n      }\n    });\n  }\n\n  private processMetaAtom(data, atomName: string, atomLength: number) {\n    const result = [];\n    let offset = 0;\n\n    // ignore proprietary iTunes atoms (for now)\n    if (atomName === '----') return result;\n\n    while (offset < atomLength) {\n      const length = strtok.UINT32_BE.get(data, offset);\n      const contType = Id4Parser.Types[strtok.UINT32_BE.get(data, offset + 8)];\n\n      const content = this.processMetaDataAtom(data.slice(offset + 12, offset + length), contType, atomName);\n\n      result.push(content);\n      offset += length;\n    }\n\n    return result;\n  }\n\n  private processMetaDataAtom(data, type, atomName) {\n    switch (type) {\n      case 'text':\n        return data.toString('utf8', 4);\n\n      case 'uint8':\n        if (atomName === 'gnre') {\n          const genreInt = strtok.UINT8.get(data, 5);\n          return common.GENRES[genreInt - 1];\n        }\n        if (atomName === 'trkn' || atomName === 'disk') {\n          return data[7] + '/' + data[9];\n        }\n\n        return strtok.UINT8.get(data, 4);\n\n      case 'jpeg':\n      case 'png':\n        return {\n          format: 'image/' + type,\n          data: new Buffer(data.slice(4))\n        };\n\n      default:\n        throw new Error('Unexpected type: ' + type);\n    }\n  }\n}\n\nmodule.exports = Id4Parser.getInstance();\n"]}