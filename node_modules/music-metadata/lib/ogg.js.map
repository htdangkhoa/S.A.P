{"version":3,"file":"ogg.js","sourceRoot":"","sources":["../src/ogg.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AACb,+BAAiC;AACjC,gCAAkC;AAClC,mCAA8B;AAC9B,mCAA8B;AAa9B,IAAK,KAIJ;AAJD,WAAK,KAAK;IACR,qCAAU,CAAA;IACV,yCAAY,CAAA;IACZ,yCAAY,CAAA;AACd,CAAC,EAJI,KAAK,KAAL,KAAK,QAIT;AAED,IAAK,SAQJ;AARD,WAAK,SAAS;IACZ,yCAAQ,CAAA;IACR,yDAAgB,CAAA;IAChB,yDAAgB,CAAA;IAChB,2EAAyB,CAAA;IACzB,2DAAiB,CAAA;IACjB,+CAAW,CAAA;IACX,qDAAc,CAAA;AAChB,CAAC,EARI,SAAS,KAAT,SAAS,QAQb;AAaD;IAAA;IAoKA,CAAC;IAjJe,qBAAW,GAAzB;QACE,MAAM,CAAC,IAAI,SAAS,EAAE,CAAC;IACzB,CAAC;IAOM,yBAAK,GAAZ,UAAa,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,QAAQ;QAA3D,iBAkIC;QAjIC,IAAM,WAAW,GAAG,IAAI,MAAM,CAAC,YAAY,EAAE,CAAC;QAE9C,IAAI,UAAU,GAAG,CAAC,CAAC;QACnB,IAAI,IAAI,GAAG,KAAK,CAAC;QAEjB,qDAAqD;QACrD,MAAM,CAAC,KAAK,CAAC,MAAM,EAAE,UAAC,CAAC,EAAE,EAAE;YACzB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACP,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC;gBACxB,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC;YAC1B,CAAC;YAED,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;gBACT,MAAM,CAAC,IAAI,EAAE,CAAC;YAChB,CAAC;YAED,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;gBACjB,KAAK,KAAK,CAAC,MAAM;oBACf,KAAI,CAAC,MAAM,GAAG,CAAC,CAAC;oBAEhB,EAAE,CAAC,CAAC,KAAI,CAAC,MAAM,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC;wBAChC,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,uCAAuC,CAAC,CAAC,CAAC;oBAClE,CAAC;oBACD,EAAE,CAAC,UAAU,GAAG,KAAI,CAAC,MAAM,CAAC,WAAW,CAAC;oBACxC,EAAE,CAAC,KAAK,EAAE,CAAC;oBACX,MAAM,CAAC,IAAI,MAAM,CAAC,UAAU,CAAC,KAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;gBAErD,KAAK,KAAK,CAAC,QAAQ;oBACjB,UAAU,GAAG,gBAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;oBAC3B,EAAE,CAAC,KAAK,EAAE,CAAC;oBACX,MAAM,CAAC,IAAI,MAAM,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;gBAE3C,KAAK,KAAK,CAAC,QAAQ;oBACjB,WAAW,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;oBACxC,EAAE,CAAC,KAAK,GAAG,KAAK,CAAC,MAAM,CAAC;oBACxB,MAAM,CAAC,SAAS,CAAC,MAAM,CAAC;gBAE1B;oBACE,IAAI,CAAC,IAAI,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;YACrC,CAAC;QACH,CAAC,CAAC,CAAC;QAEH,4DAA4D;QAC5D,0DAA0D;QAC1D,UAAU;QACV,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,UAAC,CAAC,EAAE,EAAE;YAC9B,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBACP,EAAE,CAAC,YAAY,GAAG,CAAC,CAAC;gBACpB,EAAE,CAAC,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC;gBAC1B,MAAM,CAAC,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;YAClC,CAAC;YAED,MAAM,CAAC,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;gBACjB,KAAK,SAAS,CAAC,IAAI;oBACjB,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,KAAK,YAAY,CAAC,CAAC,CAAC;wBAClC,EAAE,CAAC,KAAK,GAAG,SAAS,CAAC,UAAU,CAAC;wBAChC,MAAM,CAAC,IAAI,MAAM,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;oBACnC,CAAC;oBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,KAAK,YAAY,CAAC,CAAC,CAAC;wBACzC,EAAE,CAAC,KAAK,EAAE,CAAC;wBACX,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC;oBAC1B,CAAC;oBAAC,IAAI,CAAC,CAAC;wBACN,MAAM,CAAC,IAAI,CAAC,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC,CAAC;oBAC5E,CAAC;gBAEH,KAAK,SAAS,CAAC,YAAY;oBACzB,EAAE,CAAC,KAAK,EAAE,CAAC;oBACX,MAAM,CAAC,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAElC,KAAK,SAAS,CAAC,YAAY;oBACzB,EAAE,CAAC,KAAK,EAAE,CAAC;oBACX,MAAM,CAAC,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAElC,KAAK,SAAS,CAAC,qBAAqB;oBAClC,EAAE,CAAC,cAAc,GAAG,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC;oBACtC,4BAA4B;oBAC5B,EAAE,CAAC,CAAC,EAAE,CAAC,cAAc,KAAK,CAAC,CAAC;wBAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;oBAChD,EAAE,CAAC,KAAK,EAAE,CAAC;oBACX,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC;gBAE1B,KAAK,SAAS,CAAC,aAAa;oBAC1B,EAAE,CAAC,KAAK,EAAE,CAAC;oBACX,MAAM,CAAC,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAElC,KAAK,SAAS,CAAC,OAAO;oBACpB,EAAE,CAAC,YAAY,EAAE,CAAC;oBAClB,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,CAAC;oBACjB,IAAM,GAAG,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;oBAC3B,IAAM,GAAG,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;oBAC1C,IAAI,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;oBAE7B,EAAE,CAAC,CAAC,GAAG,KAAK,wBAAwB,CAAC,CAAC,CAAC;wBACrC,KAAK,GAAG,gBAAM,CAAC,WAAW,CAAC,IAAI,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;oBAC1D,CAAC;oBAED,QAAQ,CAAC,SAAS,CAAC,UAAU,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;oBAE3C,EAAE,CAAC,CAAC,EAAE,CAAC,YAAY,KAAK,EAAE,CAAC,cAAc,CAAC,CAAC,CAAC;wBAC1C,wCAAwC;wBACxC,sCAAsC;wBACtC,IAAI,GAAG,CAAC,YAAY,CAAC;wBACrB,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;oBACrB,CAAC;oBAED,EAAE,CAAC,KAAK,EAAE,CAAC,CAAC,yBAAyB;oBACrC,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC;gBAE1B,KAAK,SAAS,CAAC,UAAU;oBACvB,KAAI,CAAC,UAAU,GAAG;wBAChB,OAAO,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;wBAC1B,WAAW,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;wBAC3B,UAAU,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;wBAC7B,UAAU,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;wBAC7B,cAAc,EAAE,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC;wBAClC,UAAU,EAAE,CAAC,CAAC,YAAY,CAAC,EAAE,CAAC;qBAC/B,CAAC;oBAEF,QAAQ,CAAC,QAAQ,EAAE,YAAY,EAAE,SAAS,CAAC,UAAU,CAAC,CAAC;oBACvD,QAAQ,CAAC,QAAQ,EAAE,YAAY,EAAE,KAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;oBAC7D,QAAQ,CAAC,QAAQ,EAAE,SAAS,EAAE,KAAI,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;oBAC9D,QAAQ,CAAC,QAAQ,EAAE,kBAAkB,EAAE,KAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;oBAEpE,EAAE,CAAC,KAAK,GAAG,SAAS,CAAC,IAAI,CAAC;oBAC1B,MAAM,CAAC,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;gBAElC;oBACE,IAAI,CAAC,IAAI,KAAK,CAAC,0BAA0B,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;oBACvD,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC;YACvB,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,uBAAG,GAAV,UAAW,QAAQ,EAAE,IAAI;QACvB,QAAQ,CAAC,QAAQ,EAAE,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,cAAc,GAAG,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;QACxF,IAAI,EAAE,CAAC;IACT,CAAC;IACH,gBAAC;AAAD,CAAC,AApKD;AAEgB,gBAAM,GAAG;IACrB,GAAG,EAAE,EAAE;IAEP,GAAG,EAAE,UAAC,GAAG,EAAE,GAAG;QACZ,MAAM,CAAC;YACL,IAAI,EAAE,IAAI,MAAM,CAAC,UAAU,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,CAAC,CAAC;YACzD,OAAO,EAAE,GAAG,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC,CAAC;YAC/B,WAAW,EAAG,GAAG,CAAC,SAAS,CAAC,GAAG,GAAG,CAAC,CAAC;YACpC,cAAc,EAAE,CAAC,GAAG,CAAC,YAAY,CAAC,GAAG,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,GAAG,GAAG,CAAC,YAAY,CAAC,GAAG,GAAG,CAAC,CAAC;YAC9E,iBAAiB,EAAE,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC;YACtD,WAAW,EAAE,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC;YAChD,SAAS,EAAE,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC;YAC9C,QAAQ,EAAE,GAAG,CAAC,SAAS,CAAC,GAAG,GAAG,EAAE,CAAC;SAClC,CAAC;IACJ,CAAC;CACF,CAAC;AAMa,oBAAU,GAAG,QAAQ,CAAC;AA+IvC,MAAM,CAAC,OAAO,GAAG,SAAS,CAAC,WAAW,EAAE,CAAC","sourcesContent":["'use strict';\nimport * as events from 'events';\nimport * as strtok from 'strtok2';\nimport common from './common';\nimport vorbis from './vorbis';\nimport ReadableStream = NodeJS.ReadableStream;\nimport {IStreamParser, TagCallback} from './parser';\n\ninterface IFormatInfo  {\n  version: number,\n  channelMode: number,\n  sampleRate: number,\n  bitrateMax: number,\n  bitrateNominal: number,\n  bitrateMin: number;\n}\n\nenum State {\n  header = 0,\n  segments = 1,\n  pageData = 2\n}\n\nenum MetaState {\n  type = 0,\n  vendorLength = 1,\n  vendorString = 2,\n  userCommentListLength = 3,\n  commentLength = 4,\n  comment = 5,\n  vorbisInfo = 6\n}\n\ninterface IOggHeader {\n  type: string,\n  version: number,\n  packet_flag: number,\n  pcm_sample_pos: number,\n  stream_serial_num: number,\n  page_number: number,\n  check_sum: number,\n  segments: number;\n}\n\nclass OggParser implements IStreamParser {\n\n  public static Header = {\n    len: 27,\n\n    get: (buf, off): IOggHeader => {\n      return {\n        type: new strtok.StringType(4, 'ascii').get(buf, off + 0),\n        version: buf.readUInt8(off + 4),\n        packet_flag:  buf.readUInt8(off + 5),\n        pcm_sample_pos: (buf.readUInt32LE(off + 10) << 32) + buf.readUInt32LE(off + 6),\n        stream_serial_num: strtok.UINT32_LE.get(buf, off + 14),\n        page_number: strtok.UINT32_LE.get(buf, off + 18),\n        check_sum: strtok.UINT32_LE.get(buf, off + 22),\n        segments: buf.readUInt8(off + 26)\n      };\n    }\n  };\n\n  public static getInstance(): OggParser {\n    return new OggParser();\n  }\n\n  private static headerType = 'vorbis';\n\n  private formatInfo: IFormatInfo;\n  private header: IOggHeader;\n\n  public parse(stream, callback, done, readDuration, fileSize) {\n    const innerStream = new events.EventEmitter();\n\n    let pageLength = 0;\n    let stop = false;\n\n    // top level parser that handles the parsing of pages\n    strtok.parse(stream, (v, cb) => {\n      if (!v) {\n        cb.state = State.header;\n        return OggParser.Header;\n      }\n\n      if (stop) {\n        return done();\n      }\n\n      switch (cb.state) {\n        case State.header: // header\n          this.header = v;\n\n          if (this.header.type !== 'OggS') {\n            return done(new Error('expected ogg header but was not found'));\n          }\n          cb.pageNumber = this.header.page_number;\n          cb.state++;\n          return new strtok.BufferType(this.header.segments);\n\n        case State.segments: // segments\n          pageLength = common.sum(v);\n          cb.state++;\n          return new strtok.BufferType(pageLength);\n\n        case State.pageData: // page data\n          innerStream.emit('data', new Buffer(v));\n          cb.state = State.header;\n          return OggParser.Header;\n\n        default:\n          done(new Error('Illegal state'));\n      }\n    });\n\n    // Second level parser that handles the parsing of metadata.\n    // The top level parser emits data that this parser should\n    // handle.\n    strtok.parse(innerStream, (v, cb) => {\n      if (!v) {\n        cb.commentsRead = 0;\n        cb.state = MetaState.type;\n        return new strtok.BufferType(7);\n      }\n\n      switch (cb.state) {\n        case MetaState.type: // type\n          if (v.toString() === '\\x01vorbis') {\n            cb.state = MetaState.vorbisInfo;\n            return new strtok.BufferType(23);\n          } else if (v.toString() === '\\x03vorbis') {\n            cb.state++;\n            return strtok.UINT32_LE;\n          } else {\n            return done(new Error('expected vorbis header but found something else'));\n          }\n\n        case MetaState.vendorLength: // vendor length\n          cb.state++;\n          return new strtok.BufferType(v);\n\n        case MetaState.vendorString: // vendor string\n          cb.state++;\n          return new strtok.BufferType(4);\n\n        case MetaState.userCommentListLength: // user comment list length\n          cb.commentsLength = v.readUInt32LE(0);\n          // no metadata, stop parsing\n          if (cb.commentsLength === 0) return strtok.DONE;\n          cb.state++;\n          return strtok.UINT32_LE;\n\n        case MetaState.commentLength: // comment length\n          cb.state++;\n          return new strtok.BufferType(v);\n\n        case MetaState.comment: // comment\n          cb.commentsRead++;\n          v = v.toString();\n          const idx = v.indexOf('=');\n          const key = v.slice(0, idx).toUpperCase();\n          let value = v.slice(idx + 1);\n\n          if (key === 'METADATA_BLOCK_PICTURE') {\n            value = vorbis.readPicture(new Buffer(value, 'base64'));\n          }\n\n          callback(OggParser.headerType, key, value);\n\n          if (cb.commentsRead === cb.commentsLength) {\n            // if we don't want to read the duration\n            // then tell the parent stream to stop\n            stop = !readDuration;\n            return strtok.DONE;\n          }\n\n          cb.state--; // back to comment length\n          return strtok.UINT32_LE;\n\n        case MetaState.vorbisInfo: // vorbis info\n          this.formatInfo = {\n            version: v.readUInt32LE(0),\n            channelMode: v.readUInt8(4),\n            sampleRate: v.readUInt32LE(5),\n            bitrateMax: v.readUInt32LE(9),\n            bitrateNominal: v.readUInt32LE(13),\n            bitrateMin: v.readUInt32LE(17)\n          };\n\n          callback('format', 'headerType', OggParser.headerType);\n          callback('format', 'sampleRate', this.formatInfo.sampleRate);\n          callback('format', 'bitrate', this.formatInfo.bitrateNominal);\n          callback('format', 'numberOfChannels', this.formatInfo.channelMode);\n\n          cb.state = MetaState.type;\n          return new strtok.BufferType(7);\n\n        default:\n          done(new Error('Illegal metadata-state: ' + cb.state));\n          return strtok.DONE;\n      }\n    });\n  }\n\n  public end(callback, done) {\n    callback('format', 'duration', this.header.pcm_sample_pos / this.formatInfo.sampleRate);\n    done();\n  }\n}\n\nmodule.exports = OggParser.getInstance();\n"]}