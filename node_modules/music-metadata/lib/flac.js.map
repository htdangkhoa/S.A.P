{"version":3,"file":"flac.js","sourceRoot":"","sources":["../src/flac.ts"],"names":[],"mappings":"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","sourcesContent":["'use strict';\n\nimport * as strtok from 'strtok2';\nimport common from './common';\nimport {IStreamParser, TagCallback} from './parser';\nimport {HeaderType} from './tagmap';\nimport vorbis from './vorbis';\n\ninterface IState {\n\n  parse(callback, data, done): IState;\n\n  getExpectedType();\n}\n\nclass FlacParser implements IStreamParser {\n\n  public static headerType: HeaderType = 'vorbis';\n\n  public static getInstance(): FlacParser {\n    return new FlacParser();\n  }\n\n  public parse(stream, callback: TagCallback, done?, readDuration?, fileSize?) {\n    let currentState: IState = startState;\n\n    strtok.parse(stream, (v, cb) => {\n      currentState = currentState.parse(callback, v, done);\n      return currentState.getExpectedType();\n    });\n  }\n}\n\n/**\n * FLAC supports up to 128 kinds of metadata blocks; currently the following are defined:\n * ref: https://xiph.org/flac/format.html#metadata_block\n */\nenum BlockType {\n  STREAMINFO = 0,\n  PADDING = 1,\n  APPLICATION = 2,\n  SEEKTABLE = 3,\n  VORBIS_COMMENT = 4,\n  CUESHEET = 5,\n  PICTURE = 6\n}\n\n/**\n * METADATA_BLOCK_DATA\n * Ref: https://xiph.org/flac/format.html#metadata_block_streaminfo\n */\ninterface IBlockHeader {\n  // Last-metadata-block flag: '1' if this block is the last metadata block before the audio blocks, '0' otherwise.\n  lastBlock: boolean,\n  // BLOCK_TYPE\n  type: BlockType,\n  // Length (in bytes) of metadata to follow (does not include the size of the METADATA_BLOCK_HEADER)\n  length: number;\n}\n\n/**\n * METADATA_BLOCK_DATA\n * Ref: https://xiph.org/flac/format.html#metadata_block_streaminfo\n */\ninterface IBlockStreamInfo {\n  minimumBlockSize: number,\n  // The maximum block size (in samples) used in the stream.\n  // (Minimum blocksize == maximum blocksize) implies a fixed-blocksize stream.\n  maximumBlockSize: number,\n  // The minimum frame size (in bytes) used in the stream.\n  // May be 0 to imply the value is not known.\n  minimumFrameSize: number,\n  // The maximum frame size (in bytes) used in the stream.\n  // May be 0 to imply the value is not known.\n  maximumFrameSize: number,\n  // Sample rate in Hz. Though 20 bits are available,\n  // the maximum sample rate is limited by the structure of frame headers to 655350Hz.\n  // Also, a value of 0 is invalid.\n  sampleRate: number,\n  // probably slower: sampleRate: common.getBitAllignedNumber(buf, off + 10, 0, 20),\n  // (number of channels)-1. FLAC supports from 1 to 8 channels\n  channels: number,\n  // bits per sample)-1.\n  // FLAC supports from 4 to 32 bits per sample. Currently the reference encoder and decoders only support up to 24 bits per sample.\n  bitsPerSample: number,\n  // Total samples in stream.\n  // 'Samples' means inter-channel sample, i.e. one second of 44.1Khz audio will have 44100 samples regardless of the number of channels.\n  // A value of zero here means the number of total samples is unknown.\n  totalSamples: number,\n  // the MD5 hash of the file (see notes for usage... it's a littly tricky)\n  fileMD5: Buffer;\n}\n\nclass Metadata {\n\n  public static BlockHeader = {\n    len: 4,\n\n    get: (buf: Buffer, off: number): IBlockHeader => {\n      return {\n        lastBlock: common.strtokBITSET.get(buf, off, 7),\n        type: common.getBitAllignedNumber(buf, off, 1, 7),\n        length: common.strtokUINT24_BE.get(buf, off + 1)\n      };\n    }\n  };\n\n  /**\n   * METADATA_BLOCK_DATA\n   * Ref: https://xiph.org/flac/format.html#metadata_block_streaminfo\n   */\n  public static BlockStreamInfo = {\n    len: 34,\n\n    get: (buf: Buffer, off: number): IBlockStreamInfo => {\n      return {\n        // The minimum block size (in samples) used in the stream.\n        minimumBlockSize: strtok.UINT16_BE.get(buf, off),\n        // The maximum block size (in samples) used in the stream.\n        // (Minimum blocksize == maximum blocksize) implies a fixed-blocksize stream.\n        maximumBlockSize: strtok.UINT16_BE.get(buf, off + 2) / 1000,\n        // The minimum frame size (in bytes) used in the stream.\n        // May be 0 to imply the value is not known.\n        minimumFrameSize: strtok.UINT24_BE.get(buf, off + 4),\n        // The maximum frame size (in bytes) used in the stream.\n        // May be 0 to imply the value is not known.\n        maximumFrameSize: strtok.UINT24_BE.get(buf, off + 7),\n        // Sample rate in Hz. Though 20 bits are available,\n        // the maximum sample rate is limited by the structure of frame headers to 655350Hz.\n        // Also, a value of 0 is invalid.\n        sampleRate: common.strtokUINT24_BE.get(buf, off + 10) >> 4,\n        // probably slower: sampleRate: common.getBitAllignedNumber(buf, off + 10, 0, 20),\n        // (number of channels)-1. FLAC supports from 1 to 8 channels\n        channels: common.getBitAllignedNumber(buf, off + 12, 4, 3) + 1,\n        // bits per sample)-1.\n        // FLAC supports from 4 to 32 bits per sample. Currently the reference encoder and decoders only support up to 24 bits per sample.\n        bitsPerSample: common.getBitAllignedNumber(buf, off + 12, 7, 5) + 1,\n        // Total samples in stream.\n        // 'Samples' means inter-channel sample, i.e. one second of 44.1Khz audio will have 44100 samples regardless of the number of channels.\n        // A value of zero here means the number of total samples is unknown.\n        totalSamples: common.getBitAllignedNumber(buf, off + 13, 4, 36),\n        // the MD5 hash of the file (see notes for usage... it's a littly tricky)\n        fileMD5: new strtok.BufferType(16).get(buf, off + 18)\n      };\n    }\n  };\n}\n\nclass DataDecoder {\n\n  private data: Buffer;\n  private offset: number;\n\n  constructor(data: Buffer) {\n    this.data = data;\n    this.offset = 0;\n  }\n\n  public readInt32(): number {\n    const value = strtok.UINT32_LE.get(this.data, this.offset);\n    this.offset += 4;\n    return value;\n  }\n\n  public readStringUtf8(): string {\n    const len = this.readInt32();\n    const value = this.data.toString('utf8', this.offset, this.offset + len);\n    this.offset += len;\n    return value;\n  }\n}\n\n// ToDo: same in ASF\nconst finishedState: IState = {\n\n  parse: (callback) => {\n    return finishedState; // ToDo: correct?\n  },\n\n  getExpectedType: () => {\n    return strtok.DONE;\n  }\n};\n\nclass BlockDataState implements IState {\n\n  private type: BlockType;\n  private length: number;\n  private nextStateFactory;\n\n  constructor(type, length, nextStateFactory) {\n    this.type = type;\n    this.length = length;\n    this.nextStateFactory = nextStateFactory;\n  }\n\n  public parse(callback, data) {\n    switch (this.type) {\n      case BlockType.STREAMINFO: // METADATA_BLOCK_STREAMINFO\n        const blockStreamInfo = data as IBlockStreamInfo;\n        // Ref: https://xiph.org/flac/format.html#metadata_block_streaminfo\n        callback('format', 'dataformat', 'flac');\n        callback('format', 'lossless', true);\n        callback('format', 'headerType', FlacParser.headerType);\n        callback('format', 'numberOfChannels', blockStreamInfo.channels);\n        callback('format', 'bitsPerSample', blockStreamInfo.bitsPerSample);\n        callback('format', 'sampleRate', blockStreamInfo.sampleRate);\n        const duration = blockStreamInfo.totalSamples / blockStreamInfo.sampleRate;\n        callback('format', 'duration', blockStreamInfo.totalSamples / blockStreamInfo.sampleRate);\n        // callback('format', 'bitrate', fileSize / duration) // ToDo: exclude meta-data\n        break;\n\n      case BlockType.VORBIS_COMMENT: // METADATA_BLOCK_VORBIS_COMMENT\n        const decoder = new DataDecoder(data);\n        decoder.readStringUtf8(); // vendor (skip)\n        const commentListLength = decoder.readInt32();\n        for (let i = 0; i < commentListLength; i++) {\n          const comment = decoder.readStringUtf8();\n          const split = comment.split('=');\n          callback(FlacParser.headerType, split[0].toUpperCase(), split[1]);\n        }\n        break;\n\n      case BlockType.PICTURE: // METADATA_BLOCK_PICTURE\n        const picture = vorbis.readPicture(data);\n        callback(FlacParser.headerType, 'METADATA_BLOCK_PICTURE', picture);\n        break;\n    }\n    return this.nextStateFactory();\n  }\n\n  public getExpectedType() {\n    switch (this.type) {\n      case 0:\n        return Metadata.BlockStreamInfo;\n      default:\n        return new strtok.BufferType(this.length);\n    }\n  }\n}\n\nconst blockHeaderState: IState = {\n  parse: (callback, data, done) => {\n    const header = data as IBlockHeader;\n    const followingStateFactory = header.lastBlock ? () => {\n      done();\n      return finishedState;\n    } : () => {\n      return blockHeaderState;\n    };\n\n    return new BlockDataState(header.type, header.length, followingStateFactory);\n  },\n  getExpectedType: () => {\n    return Metadata.BlockHeader;\n  }\n};\n\nconst idState: IState = {\n\n  parse: (callback, data, done) => {\n    if (data.toString() !== 'fLaC') {\n      done(new Error('expected flac header but was not found'));\n    }\n    return blockHeaderState;\n  },\n\n  getExpectedType: () => {\n    return new strtok.BufferType(4);\n  }\n};\n\nconst startState: IState = {\n\n  parse: (callback) => {\n    return idState;\n  },\n\n  getExpectedType: () => {\n    return strtok.DONE;\n  }\n};\n\nmodule.exports = FlacParser.getInstance();\n"]}