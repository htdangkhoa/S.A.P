'use strict';
var strtok = require("strtok2");
var common_1 = require("./common");
var mpeg_1 = require("./mpeg");
var Id3v1Parser = (function () {
    function Id3v1Parser() {
        this.type = 'id3v1.1';
    }
    Id3v1Parser.getInstance = function () {
        return new Id3v1Parser();
    };
    Id3v1Parser.parseTag = function (buf, offset, end, type, tag, callback) {
        var value = buf.toString('ascii', offset, end);
        value = value.trim().replace(/\x00/g, '');
        if (value.length > 0) {
            callback(type, tag, value);
        }
    };
    Id3v1Parser.prototype.parse = function (stream, callback, done, readDuration, fileSize) {
        var _this = this;
        var mp3Done = false;
        var id3Done = false;
        stream.on('data', function (data) {
            _this.endData = data;
        });
        this.mpegParser = new mpeg_1.MpegParser(128);
        this.mpegParser.parse(stream, callback, function (err) {
            mp3Done = true;
            if (id3Done) {
                return done(err);
            }
            else
                return strtok.DONE;
        }, readDuration, fileSize);
    };
    Id3v1Parser.prototype.end = function (callback, done) {
        var offset = this.endData.length - 128;
        var header = this.endData.toString('ascii', offset, offset += 3);
        if (header !== 'TAG') {
            return done(new Error('Could not find metadata header'));
        }
        callback('format', 'headerType', this.type);
        Id3v1Parser.parseTag(this.endData, offset, offset += 30, this.type, 'title', callback);
        Id3v1Parser.parseTag(this.endData, offset, offset += 30, this.type, 'artist', callback);
        Id3v1Parser.parseTag(this.endData, offset, offset += 30, this.type, 'album', callback);
        Id3v1Parser.parseTag(this.endData, offset, offset += 4, this.type, 'year', callback);
        Id3v1Parser.parseTag(this.endData, offset, offset += 28, this.type, 'comment', callback);
        var track = this.endData[this.endData.length - 2];
        callback(this.type, 'track', track);
        if (this.endData[this.endData.length - 1] in common_1.default.GENRES) {
            var genre = common_1.default.GENRES[this.endData[this.endData.length - 1]];
            callback(this.type, 'genre', genre);
        }
        if (this.mpegParser) {
            this.mpegParser.end(callback, done);
        }
    };
    return Id3v1Parser;
}());
module.exports = Id3v1Parser.getInstance();
//# sourceMappingURL=id3v1.js.map