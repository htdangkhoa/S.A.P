{"version":3,"file":"id3v2.js","sourceRoot":"","sources":["../../src/id3v2.ts"],"names":[],"mappings":"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","sourcesContent":["import ReadableStream = NodeJS.ReadableStream;\r\nimport * as strtok from 'strtok2';\r\nimport {isArray} from 'util';\r\nimport common from './common';\r\nimport id3v2_frames from './id3v2_frames';\r\nimport {MpegParser} from './mpeg';\r\nimport {IStreamParser} from './parser';\r\nimport {HeaderType} from './tagmap';\r\n\r\ninterface IFrameFlags {\r\n  status: {\r\n    tag_alter_preservation: boolean,\r\n    file_alter_preservation: boolean,\r\n    read_only: boolean\r\n  },\r\n  format: {\r\n    grouping_identity: boolean,\r\n    compression: boolean,\r\n    encryption: boolean,\r\n    unsynchronisation: boolean,\r\n    data_length_indicator: boolean\r\n  };\r\n}\r\ninterface IFrameHeader {\r\n  id: string,\r\n  length?: number;\r\n  flags?: IFrameFlags;\r\n}\r\n\r\n/**\r\n * ID3v2 tag header\r\n */\r\ninterface IID3v2header {\r\n// ID3v2/file identifier   \"ID3\"\r\n  fileIdentifier: string,\r\n  // ID3v2 versionIndex\r\n  version: {\r\n    major: number,\r\n    revision: number\r\n  },\r\n  // ID3v2 flags\r\n  flags: {\r\n    // Raw flags value\r\n    raw: number,\r\n    // Unsynchronisation\r\n    unsynchronisation: boolean,\r\n    // Extended header\r\n    isExtendedHeader: boolean\r\n    // Experimental indicator\r\n    expIndicator: boolean,\r\n    footer: boolean\r\n  };\r\n  size: number;\r\n}\r\n\r\ninterface IExtendedHeader {\r\n  // Extended header size\r\n  size: number,\r\n  extendedFlags: number,\r\n  // Size of padding\r\n  sizeOfPadding: number,\r\n  // CRC data present\r\n  crcDataPresent: boolean;\r\n}\r\n\r\nenum State {\r\n  header,\r\n  extendedHeader,\r\n  extendedHeaderData,\r\n  id3_data,\r\n  MP3\r\n}\r\n\r\nclass ID3v2 {\r\n\r\n  /**\r\n   * 28 bits (representing up to 256MB) integer, the msb is 0 to avoid 'false syncsignals'.\r\n   * 4 * %0xxxxxxx\r\n   */\r\n  public static UINT32SYNCSAFE = {\r\n    get: (buf: Buffer, off: number): number => {\r\n      return buf[off + 3] & 0x7f | ((buf[off + 2]) << 7) |\r\n        ((buf[off + 1]) << 14) | ((buf[off]) << 21);\r\n    },\r\n    len: 4\r\n  };\r\n\r\n  /**\r\n   * ID3v2 header\r\n   * Ref: http://id3.org/id3v2.3.0#ID3v2_header\r\n   * ToDo\r\n   */\r\n  public static Header = {\r\n    len: 10,\r\n\r\n    get: (buf, off): IID3v2header => {\r\n      return {\r\n        // ID3v2/file identifier   \"ID3\"\r\n        fileIdentifier: new strtok.StringType(3, 'ascii').get(buf, off),\r\n        // ID3v2 versionIndex\r\n        version: {\r\n          major: strtok.INT8.get(buf, off + 3),\r\n          revision: strtok.INT8.get(buf, off + 4)\r\n        },\r\n        // ID3v2 flags\r\n        flags: {\r\n          // Raw flags value\r\n          raw: strtok.INT8.get(buf, off + 4),\r\n          // Unsynchronisation\r\n          unsynchronisation: common.strtokBITSET.get(buf, off + 5, 7),\r\n          // Extended header\r\n          isExtendedHeader: common.strtokBITSET.get(buf, off + 5, 6),\r\n          // Experimental indicator\r\n          expIndicator: common.strtokBITSET.get(buf, off + 5, 5),\r\n          footer: common.strtokBITSET.get(buf, off + 5, 4)\r\n        },\r\n        size: ID3v2.UINT32SYNCSAFE.get(buf, off + 6)\r\n      };\r\n    }\r\n  };\r\n\r\n  public static ExtendedHeader = {\r\n    len: 10,\r\n\r\n    get: (buf, off): IExtendedHeader => {\r\n      return {\r\n        // Extended header size\r\n        size: strtok.UINT32_BE.get(buf, off),\r\n        // Extended Flags\r\n        extendedFlags: strtok.UINT16_BE.get(buf, off + 4),\r\n        // Size of padding\r\n        sizeOfPadding: strtok.UINT32_BE.get(buf, off + 6),\r\n        // CRC data present\r\n        crcDataPresent: common.strtokBITSET.get(buf, off + 4, 31)\r\n      };\r\n    }\r\n  };\r\n}\r\n\r\nclass Id3v2Parser implements IStreamParser {\r\n\r\n  public static getInstance(): Id3v2Parser {\r\n    return new Id3v2Parser();\r\n  }\r\n\r\n  private static readFrameHeader(v, majorVer): IFrameHeader {\r\n    let header: IFrameHeader;\r\n    switch (majorVer) {\r\n\r\n      case 2:\r\n        header = {\r\n          id: v.toString('ascii', 0, 3),\r\n          length: common.strtokUINT24_BE.get(v, 3)\r\n        };\r\n        break;\r\n\r\n      case 3:\r\n        header = {\r\n          id: v.toString('ascii', 0, 4),\r\n          length: strtok.UINT32_BE.get(v, 4),\r\n          flags: Id3v2Parser.readFrameFlags(v.slice(8, 10))\r\n        };\r\n        break;\r\n\r\n      case 4:\r\n        header = {\r\n          id: v.toString('ascii', 0, 4),\r\n          length: ID3v2.UINT32SYNCSAFE.get(v, 4),\r\n          flags: Id3v2Parser.readFrameFlags(v.slice(8, 10))\r\n        };\r\n        break;\r\n\r\n      default:\r\n        throw new Error('Unexpected majorVer: ' + majorVer);\r\n    }\r\n    return header;\r\n  }\r\n\r\n  private static getFrameHeaderLength(majorVer, done): number {\r\n    switch (majorVer) {\r\n      case 2:\r\n        return 6;\r\n      case 3:\r\n      case 4:\r\n        return 10;\r\n      default:\r\n        return done(new Error('header versionIndex is incorrect'));\r\n    }\r\n  }\r\n\r\n  private static readFrameFlags(b: Buffer): IFrameFlags {\r\n    return {\r\n      status: {\r\n        tag_alter_preservation: common.strtokBITSET.get(b, 0, 6),\r\n        file_alter_preservation: common.strtokBITSET.get(b, 0, 5),\r\n        read_only: common.strtokBITSET.get(b, 0, 4)\r\n      },\r\n      format: {\r\n        grouping_identity: common.strtokBITSET.get(b, 1, 7),\r\n        compression: common.strtokBITSET.get(b, 1, 3),\r\n        encryption: common.strtokBITSET.get(b, 1, 2),\r\n        unsynchronisation: common.strtokBITSET.get(b, 1, 1),\r\n        data_length_indicator: common.strtokBITSET.get(b, 1, 0)\r\n      }\r\n    };\r\n  }\r\n\r\n  private state: State = State.header;\r\n  private mpegParser: MpegParser;\r\n\r\n  public parse(stream, callback, done, readDuration, fileSize) {\r\n    let self: Id3v2Parser = this;\r\n\r\n    let id3Header: IID3v2header;\r\n    let extendedHeader: IExtendedHeader;\r\n    let headerType: HeaderType;\r\n\r\n    strtok.parse(stream, (v, cb) => {\r\n      if (v === undefined) {\r\n        self.state = State.header;\r\n        return ID3v2.Header;\r\n      }\r\n\r\n      switch (self.state) {\r\n        case State.header: // ID3v2 header\r\n          id3Header = <IID3v2header> v;\r\n          if (id3Header.fileIdentifier !== 'ID3') {\r\n            return done(new Error('expected file identifier \\'ID3\\' not found'));\r\n          }\r\n          headerType = <HeaderType> ('id3v2.' + id3Header.version.major);\r\n          if (id3Header.flags.isExtendedHeader) {\r\n            self.state = State.extendedHeader;\r\n            return ID3v2.ExtendedHeader;\r\n          } else {\r\n            self.state = State.id3_data;\r\n            return new strtok.BufferType(id3Header.size);\r\n          }\r\n\r\n        case State.extendedHeader:\r\n          extendedHeader = <IExtendedHeader> v;\r\n          let dataRemaining = extendedHeader.size - ID3v2.ExtendedHeader.len;\r\n          if (dataRemaining > 0) {\r\n            self.state = State.extendedHeaderData;\r\n            return new strtok.BufferType(dataRemaining);\r\n          } else {\r\n            self.state = State.id3_data;\r\n            return new strtok.BufferType(id3Header.size - extendedHeader.size);\r\n          }\r\n\r\n        case State.extendedHeaderData:\r\n          self.state = State.id3_data;\r\n          return new strtok.BufferType(id3Header.size - extendedHeader.size);\r\n\r\n        case State.id3_data: // mm data\r\n          for (let tag of this.parseMetadata(v, id3Header, done)){\r\n          if (tag.id === 'TXXX') {\r\n            for (let text of tag.value.text) {\r\n              callback(headerType, tag.id + ':' + tag.value.description, text);\r\n            }\r\n          } else if (isArray(tag.value)) {\r\n              for (let value of tag.value) {\r\n                callback(headerType, tag.id, value);\r\n              }\r\n            } else {\r\n              callback(headerType, tag.id, tag.value);\r\n            }\r\n          }\r\n          callback('format', 'headerType', headerType);\r\n          this.mpegParser = new MpegParser(id3Header.size);\r\n          this.mpegParser.parse(stream, callback, done, readDuration, fileSize);\r\n          return strtok.DONE;\r\n\r\n        default:\r\n          done(new Error('Undefined state: ' + self.state));\r\n      }\r\n    });\r\n  }\r\n\r\n  public end(callback, done) {\r\n    this.mpegParser.end(callback, done);\r\n  }\r\n\r\n  private parseMetadata(data: Buffer, header: IID3v2header, done): Array<{id: string, value: any}> {\r\n    let offset = 0;\r\n    let tags: Array<{id: string, value: any}> = [];\r\n\r\n    while (true) {\r\n      if (offset === data.length) break;\r\n      let frameHeaderBytes = data.slice(offset, offset += Id3v2Parser.getFrameHeaderLength(header.version.major, done));\r\n      let frameHeader = Id3v2Parser.readFrameHeader(frameHeaderBytes, header.version.major);\r\n\r\n      // Last frame. Check first char is a letter, bit of defensive programming\r\n      if (frameHeader.id === '' || frameHeader.id === '\\u0000\\u0000\\u0000\\u0000' ||\r\n        'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.indexOf(frameHeader.id[0]) === -1) {\r\n        // ToDo: generate warning\r\n        break;\r\n      }\r\n\r\n      let frameDataBytes = data.slice(offset, offset += frameHeader.length);\r\n      let values = this.readFrameData(frameDataBytes, frameHeader, header.version.major);\r\n      tags.push({id: frameHeader.id, value: values});\r\n    }\r\n    return tags;\r\n  }\r\n\r\n  private readFrameData(v, frameHeader, majorVer) {\r\n    switch (majorVer) {\r\n      case 2:\r\n        return id3v2_frames.readData(v, frameHeader.id, null, majorVer);\r\n      case 3:\r\n      case 4:\r\n        if (frameHeader.flags.format.unsynchronisation) {\r\n          v = common.removeUnsyncBytes(v);\r\n        }\r\n        if (frameHeader.flags.format.data_length_indicator) {\r\n          v = v.slice(4, v.length);\r\n        }\r\n        return id3v2_frames.readData(v, frameHeader.id, frameHeader.flags, majorVer);\r\n      default:\r\n        throw new Error('Unexpected majorVer: ' + majorVer);\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = Id3v2Parser.getInstance();\r\n"]}