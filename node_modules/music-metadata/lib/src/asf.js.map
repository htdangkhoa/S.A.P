{"version":3,"file":"asf.js","sourceRoot":"","sources":["../../src/asf.ts"],"names":[],"mappings":"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","sourcesContent":["'use strict';\r\nimport * as equal from 'deep-equal';\r\nimport * as strtok from 'strtok2';\r\nimport {Token} from 'strtok2';\r\nimport common from './common';\r\nimport {IStreamParser, TagCallback} from './parser';\r\nimport ReadableStream = NodeJS.ReadableStream;\r\n\r\ninterface IState {\r\n\r\n  parse(callback, data, done): IState;\r\n\r\n  getExpectedType(): Token;\r\n}\r\n\r\nabstract class State implements IState {\r\n\r\n  protected nextState: IState;\r\n  protected size: number;\r\n\r\n  constructor(nextState: IState, size: number) {\r\n    this.nextState = nextState;\r\n    this.size = size;\r\n  }\r\n\r\n  public abstract parse(callback, data, done)\r\n\r\n  public abstract getExpectedType()\r\n}\r\n\r\nclass AsfParser implements IStreamParser {\r\n\r\n  public static headerType = 'asf';\r\n\r\n  public static startState: IState =\r\n  {\r\n    parse: () => {\r\n      return AsfParser.idState;\r\n    },\r\n\r\n    getExpectedType: () => {\r\n      return strtok.DONE; // unreachable statement\r\n    }\r\n  };\r\n\r\n  public static finishedState: IState =\r\n  {\r\n    parse: () => {\r\n      return AsfParser.finishedState;\r\n    },\r\n\r\n    getExpectedType: () => {\r\n      return strtok.DONE;\r\n    }\r\n  };\r\n\r\n  public static idState: IState =\r\n  {\r\n    parse: (callback, data, done) => {\r\n      if (!equal(common.asfGuidBuf, data)) {\r\n        done(new Error('expected asf header but was not found'));\r\n        return AsfParser.finishedState;\r\n      }\r\n      return new HeaderDataState();\r\n    },\r\n\r\n    getExpectedType: () => {\r\n      return new strtok.BufferType(common.asfGuidBuf.length);\r\n    }\r\n  };\r\n\r\n  public static getInstance(): AsfParser {\r\n    return new AsfParser();\r\n  }\r\n\r\n  public parse(stream, callback, done) {\r\n\r\n    let currentState: IState = AsfParser.startState;\r\n\r\n    strtok.parse(stream, (v, cb) => {\r\n      currentState = currentState.parse(callback, v, done);\r\n      return currentState.getExpectedType();\r\n    });\r\n  }\r\n}\r\n\r\ntype AttributeParser = (buf: Buffer) => boolean | string | number | Buffer;\r\n\r\nclass Util {\r\n\r\n  public static getParserForAttr(i: number): AttributeParser {\r\n    return Util.attributeParsers[i];\r\n  }\r\n\r\n  public static parseUnicodeAttr(buf): string {\r\n    return common.stripNulls(common.decodeString(buf, 'utf16le'));\r\n  }\r\n\r\n  public static parseByteArrayAttr(buf: Buffer): Buffer {\r\n    let newBuf = new Buffer(buf.length);\r\n    buf.copy(newBuf);\r\n    return newBuf;\r\n  }\r\n\r\n  public static parseBoolAttr(buf: Buffer): boolean {\r\n    return Util.parseDWordAttr(buf) === 1;\r\n  }\r\n\r\n  public static parseDWordAttr(buf: Buffer): number {\r\n    return buf.readUInt32LE(0);\r\n  }\r\n\r\n  public static parseQWordAttr(buf: Buffer): number {\r\n    return Util.readUInt64LE(buf, 0);\r\n  }\r\n\r\n  public static parseWordAttr(buf: Buffer): number {\r\n    return buf.readUInt16LE(0);\r\n  }\r\n\r\n  public static readUInt64LE(buffer, offset): number {\r\n    let high = buffer.slice(offset, offset + 4).readUInt32LE(0);\r\n    let low = buffer.slice(offset + 4, offset + 8).readUInt32LE(0);\r\n    let maxuint32 = Math.pow(2, 32);\r\n    return ((low * maxuint32) + (high >>> 0));\r\n  }\r\n\r\n  private static attributeParsers: AttributeParser[] = [\r\n    Util.parseUnicodeAttr,\r\n    Util.parseByteArrayAttr,\r\n    Util.parseBoolAttr,\r\n    Util.parseDWordAttr,\r\n    Util.parseQWordAttr,\r\n    Util.parseWordAttr,\r\n    Util.parseByteArrayAttr\r\n  ];\r\n}\r\n\r\ninterface IGuidState {\r\n  guid: Buffer;\r\n\r\n  getState(nextState: IState, size: number): IState;\r\n}\r\n\r\nclass ReadObjectState implements IState {\r\n\r\n  public static stateByGuid(guidBuf) {\r\n    for (let guidState of ReadObjectState.guidStates) {\r\n      if (equal(guidState.guid, guidBuf)) {\r\n        return guidState;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  private static guidStates: IGuidState[] = [\r\n    {\r\n      guid: new Buffer([\r\n        0xA1, 0xDC, 0xAB, 0x8C, 0x47, 0xA9, 0xCF, 0x11,\r\n        0x8E, 0xE4, 0x00, 0xC0, 0x0C, 0x20, 0x53, 0x65\r\n      ]),\r\n\r\n      getState: (nextState: IState, size: number) => {\r\n        return new FilePropertiesObject(nextState, size);\r\n      }\r\n    },\r\n    // ContentDescriptionObject\r\n    {\r\n      guid: new Buffer([\r\n        0x33, 0x26, 0xB2, 0x75, 0x8E, 0x66, 0xCF, 0x11,\r\n        0xA6, 0xD9, 0x00, 0xAA, 0x00, 0x62, 0xCE, 0x6C\r\n      ]),\r\n\r\n      getState: (nextState: IState, size: number) => {\r\n        return new ContentDescriptionObjectState(nextState, size);\r\n      }\r\n    },\r\n    // ExtendedContentDescriptionObject\r\n    {\r\n      guid: new Buffer([\r\n        0x40, 0xA4, 0xD0, 0xD2, 0x07, 0xE3, 0xD2, 0x11,\r\n        0x97, 0xF0, 0x00, 0xA0, 0xC9, 0x5E, 0xA8, 0x50\r\n      ]),\r\n\r\n      getState: (nextState: IState, size: number) => {\r\n        return new ExtendedContentDescriptionObjectState(nextState, size);\r\n      }\r\n    }];\r\n\r\n  protected size: number;\r\n  protected objectCount: number;\r\n\r\n  constructor(size: number, objectCount: number) {\r\n    this.size = size;\r\n    this.objectCount = objectCount;\r\n  }\r\n\r\n  public parse(callback, data, done) {\r\n    let guid = data.slice(0, 16);\r\n    let size = Util.readUInt64LE(data, 16);\r\n    this.objectCount -= 1;\r\n    this.size -= size;\r\n    let nextState = (this.objectCount <= 0) ? AsfParser.finishedState : this;\r\n    let guidState = ReadObjectState.stateByGuid(guid);\r\n    return guidState ? guidState.getState(nextState, size - 24) : new IgnoreObjectState(nextState, size - 24);\r\n  }\r\n\r\n  public getExpectedType() {\r\n    return new strtok.BufferType(24);\r\n  }\r\n}\r\n\r\nclass HeaderDataState implements IState {\r\n\r\n  public parse(callback, data, done) {\r\n    let size = Util.readUInt64LE(data, 0);\r\n    let objectCount = data.readUInt32LE(8);\r\n    return new ReadObjectState(size, objectCount);\r\n  }\r\n\r\n  public getExpectedType() {\r\n    // 8 bytes size\r\n    // 4 bytes object count\r\n    // 2 bytes ignore\r\n    return new strtok.BufferType(14);\r\n  }\r\n}\r\n\r\nclass IgnoreObjectState extends State {\r\n\r\n  constructor(nextState, size) {\r\n    super(nextState, size);\r\n  }\r\n\r\n  public parse(callback: TagCallback, data, done) {\r\n    if (this.nextState === AsfParser.finishedState) {\r\n      done();\r\n    }\r\n    return this.nextState;\r\n  }\r\n\r\n  public getExpectedType() {\r\n    return new strtok.IgnoreType(this.size);\r\n  }\r\n}\r\n\r\nclass ContentDescriptionObjectState extends State {\r\n\r\n  public static guid = new Buffer([\r\n    0x33, 0x26, 0xB2, 0x75, 0x8E, 0x66, 0xCF, 0x11,\r\n    0xA6, 0xD9, 0x00, 0xAA, 0x00, 0x62, 0xCE, 0x6C\r\n  ]);\r\n\r\n  private static contentDescTags = ['Title', 'Author', 'Copyright', 'Description', 'Rating'];\r\n\r\n  constructor(nextState: IState, size: number) {\r\n    super(nextState, size);\r\n  }\r\n\r\n  public parse(callback, data, done) {\r\n    let lengths = [\r\n      data.readUInt16LE(0),\r\n      data.readUInt16LE(2),\r\n      data.readUInt16LE(4),\r\n      data.readUInt16LE(6),\r\n      data.readUInt16LE(8)\r\n    ];\r\n    let pos = 10;\r\n    for (let i = 0; i < ContentDescriptionObjectState.contentDescTags.length; i += 1) {\r\n      let tagName = ContentDescriptionObjectState.contentDescTags[i];\r\n      let length = lengths[i];\r\n      let end = pos + length;\r\n      if (length > 0) {\r\n        let value = Util.parseUnicodeAttr(data.slice(pos, end));\r\n        callback(AsfParser.headerType, tagName, value);\r\n      }\r\n      pos = end;\r\n    }\r\n    if (this.nextState === AsfParser.finishedState) {\r\n      done();\r\n    }\r\n    return this.nextState;\r\n  }\r\n\r\n  public getExpectedType() {\r\n    return new strtok.BufferType(this.size);\r\n  }\r\n\r\n}\r\n\r\nclass ExtendedContentDescriptionObjectState extends State {\r\n\r\n  constructor(nextState: IState, size: number) {\r\n    super(nextState, size);\r\n  }\r\n\r\n  public parse(callback, data, done) {\r\n    let attrCount = data.readUInt16LE(0);\r\n    let pos = 2;\r\n    for (let i = 0; i < attrCount; i += 1) {\r\n      let nameLen = data.readUInt16LE(pos);\r\n      pos += 2;\r\n      let name = Util.parseUnicodeAttr(data.slice(pos, pos + nameLen));\r\n      pos += nameLen;\r\n      let valueType = data.readUInt16LE(pos);\r\n      pos += 2;\r\n      let valueLen = data.readUInt16LE(pos);\r\n      pos += 2;\r\n      let value = data.slice(pos, pos + valueLen);\r\n      pos += valueLen;\r\n      let parseAttr = Util.getParserForAttr(valueType);\r\n      if (!parseAttr) {\r\n        done(new Error('unexpected value headerType: ' + valueType));\r\n        return AsfParser.finishedState;\r\n      }\r\n      let attr = parseAttr(value);\r\n      callback(AsfParser.headerType, name, attr);\r\n    }\r\n    if (this.nextState === AsfParser.finishedState) {\r\n      done();\r\n    }\r\n    return this.nextState;\r\n  }\r\n\r\n  public getExpectedType() {\r\n    return new strtok.BufferType(this.size);\r\n  }\r\n}\r\n\r\nclass FilePropertiesObject extends State {\r\n\r\n  constructor(nextState, size) {\r\n    super(nextState, size);\r\n  }\r\n\r\n  public parse(callback, data, done) {\r\n    // in miliseconds\r\n    let playDuration = Util.parseQWordAttr(data.slice(40, 48)) / 10000;\r\n    callback('format', 'duration', playDuration / 1000);\r\n\r\n    if (this.nextState === AsfParser.finishedState) {\r\n      done();\r\n    }\r\n    return this.nextState;\r\n  }\r\n\r\n  public getExpectedType() {\r\n    return new strtok.BufferType(this.size);\r\n  }\r\n\r\n}\r\n\r\nmodule.exports = AsfParser.getInstance();\r\n"]}