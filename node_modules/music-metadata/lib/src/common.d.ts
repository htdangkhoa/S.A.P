export default class Common {
    static asfGuidBuf: Buffer;
    static strtokUINT24_BE: {
        get: (buf: Buffer, off: number) => number;
        len: number;
    };
    static strtokBITSET: {
        get: (buf: Buffer, off: number, bit: number) => boolean;
        len: number;
    };
    static strtokUINT32_LE: {
        len: number;
        get: (buf: Buffer, off: number) => number;
    };
    static GENRES: string[];
    static getParserForMediaType(types: any, header: any): any;
    static streamOnRealEnd(stream: NodeJS.ReadableStream, callback: () => void): void;
    static removeUnsyncBytes(buffer: Buffer): Uint8Array;
    /**
     *
     * @param buffer
     * @param start
     * @param end
     * @param encoding // ToDo: ts.enum
     * @return {number}
     */
    static findZero(buffer: Buffer, start: number, end: number, encoding?: string): number;
    static sum(arr: number[]): number;
    static swapBytes(buffer: Buffer): Buffer;
    static readUTF16String(buffer: Buffer): string;
    /**
     *
     * @param buffer
     * @param encoding ToDo
     * @return {string}
     */
    static decodeString(buffer: Buffer, encoding: string): string;
    static parseGenre(origVal: any): string;
    static stripNulls(str: string): string;
    /**
     * Read bit-aligned number start from buffer
     * Total offset in bits = byteOffset * 8 + bitOffset
     * @param buf Byte buffer
     * @param byteOffset Starting offset in bytes
     * @param bitOffset Starting offset in bits: 0 = lsb
     * @param len Length of number in bits
     * @return {number} decoded bit aligned number
     */
    static getBitAllignedNumber(buf: Buffer, byteOffset: number, bitOffset: number, len: number): number;
    /**
     * Read bit-aligned number start from buffer
     * Total offset in bits = byteOffset * 8 + bitOffset
     * @param buf Byte buffer
     * @param byteOffset Starting offset in bytes
     * @param bitOffset Starting offset in bits: 0 = most significant bit, 7 is least significant bit
     * @return {number} decoded bit aligned number
     */
    static isBitSet(buf: Buffer, byteOffset: number, bitOffset: number): boolean;
}
