{"version":3,"file":"browser.js","sourceRoot":"","sources":["../src/browser.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,wBAAwB;AACxB,iCAAmC;AACnC,uCAAyC;AAEzC,8CAAiD;AACjD,oCAAuC;AAKvC,MAAM,CAAC,OAAO,GAAG,UAAC,MAAM,EAAE,IAAI,EAAE,QAAQ;IACtC,MAAM,CAAC,aAAa,CAAC,WAAW,CAAC,kBAAkB,CAAC,MAAM,CAAC,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;AAC/E,CAAC,CAAC;AAMF,4BAA4B,IAAoD;IAAhF,iBA0BC;IAzBC,IAAM,MAAM,GAAG,OAAO,CAAE,UAAC,IAAI;QAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;YAAC,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC,EAAE,IAAI,EAAE,EAAC,WAAW,EAAE,KAAK,EAAC,CAAuB,CAAC;IAErD,EAAE,CAAC,CAAC,IAAI,YAAY,WAAW,CAAC,CAAC,CAAC;QAChC,MAAM,CAAC,yBAAyB,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IACjD,CAAC;IAED,MAAM,CAAC,QAAQ,GAAG,UAAC,EAAE;QACnB,OAAO,CAAC,QAAQ,CAAE;YAChB,EAAE,CAAE,IAAa,CAAC,IAAI,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;QACnB,MAAM,CAAE,IAAuB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC/C,CAAC;IACD,EAAE,CAAC,CAAC,IAAI,YAAY,QAAQ,CAAC,CAAC,CAAC;QAC7B,MAAM,IAAI,KAAK,CAAC,0DAA0D,CAAC,CAAC;IAC9E,CAAC;IACD,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,YAAY,IAAI,IAAI,IAAI,YAAY,IAAI,CAAC,CAAC,CAAC,CAAC;QACpD,MAAM,IAAI,KAAK,CAAC,8CAA8C,CAAC,CAAC;IAClE,CAAC;IAED,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;AACvC,CAAC;AAED,mCAAmC,WAAwB,EAAE,aAA4B;IACtF,aAAoC,CAAC,QAAQ,GAAG,UAAC,EAAE;QAClD,OAAO,CAAC,QAAQ,CAAE;YAChB,EAAE,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC;QAC7B,CAAC,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,OAAO,CAAC,QAAQ,CAAE;QAChB,aAAa,CAAC,KAAK,CAAC,IAAI,MAAM,CAAC,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC;QAC7D,aAAa,CAAC,GAAG,EAAE,CAAC;IACtB,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,aAAa,CAAC;AACvB,CAAC","sourcesContent":["'use strict';\n\n/*jslint browser: true*/\nimport * as through from 'through';\nimport * as musicMetadata from './index';\n\nimport readStream = require('filereader-stream');\nimport isStream = require('is-stream');\n\nimport {ThroughStream} from 'through';\nimport ReadableStream = NodeJS.ReadableStream;\n\nmodule.exports = (stream, opts, callback) => {\n  return musicMetadata.parseStream(wrapFileWithStream(stream), opts, callback);\n};\n\ninterface IFileWrapperStream extends ThroughStream {\n  fileSize: (cb: (fileSize: number) => void) => void\n}\n\nfunction wrapFileWithStream(file: ArrayBuffer | Blob | FileList | ReadableStream): ReadableStream {\n  const stream = through( (data) => {\n    if (data.length > 0) this.queue(data);\n  }, null, {autoDestroy: false}) as IFileWrapperStream;\n\n  if (file instanceof ArrayBuffer) {\n    return wrapArrayBufferWithStream(file, stream);\n  }\n\n  stream.fileSize = (cb) => {\n    process.nextTick( () => {\n      cb((file as Blob).size);\n    });\n  };\n\n  if (isStream(file)) {\n    return (file as ReadableStream).pipe(stream);\n  }\n  if (file instanceof FileList) {\n    throw new Error('You have passed a FileList object but we expected a File');\n  }\n  if (!(file instanceof File || file instanceof Blob)) {\n    throw new Error('You must provide a valid File or Blob object');\n  }\n\n  return readStream(file).pipe(stream);\n}\n\nfunction wrapArrayBufferWithStream(arrayBuffer: ArrayBuffer, throughStream: ThroughStream) {\n  (throughStream as IFileWrapperStream).fileSize = (cb) => {\n    process.nextTick( () => {\n      cb(arrayBuffer.byteLength);\n    });\n  };\n\n  process.nextTick( () => {\n    throughStream.write(new Buffer(new Uint8Array(arrayBuffer)));\n    throughStream.end();\n  });\n\n  return throughStream;\n}\n"]}