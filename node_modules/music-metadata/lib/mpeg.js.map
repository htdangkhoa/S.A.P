{"version":3,"file":"mpeg.js","sourceRoot":"","sources":["../src/mpeg.ts"],"names":[],"mappings":"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tD,IAAI,EAAE,EAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAC;IACvD,IAAI,EAAE,EAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAC;IACvD,IAAI,EAAE,EAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAC;IACvD,IAAI,EAAE,EAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAC;IACzD,IAAI,EAAE,EAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAC;IAC1D,IAAI,EAAE,EAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAC;IAC1D,IAAI,EAAE,EAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAC;IAC1D,IAAI,EAAE,EAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAC;IAC5D,IAAI,EAAE,EAAC,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,GAAG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","sourcesContent":["'use strict';\n\nimport ReadableStream = NodeJS.ReadableStream;\nimport * as strtok from 'strtok2';\nimport {Token} from 'strtok2';\nimport common from './common';\nimport {Done, GetFileSize, IStreamParser, TagCallback} from './parser';\n\nenum State {\n  mpegSearchSync1 = 1,\n  mpegSearchSync2 = 2,\n  audio_frame_header = 3,\n  CRC = 4,\n  side_information = 5,\n  xtra_info_header = 6,\n  skip_frame_data = 7\n}\n\n/**\n * MPEG Audio Layer I/II/III frame header\n * Ref: https://www.mp3-tech.org/programmer/frame_header.html\n * Bit layout: AAAAAAAA AAABBCCD EEEEFFGH IIJJKLMM\n */\nclass MpegFrameHeader {\n\n  public static SyncByte1 = 0xFF;\n  public static SyncByte2 = 0xE0;\n\n  public static VersionID = [2.5, null, 2, 1];\n  public static LayerDescription = [null, 3, 2, 1];\n  public static ChannelMode = ['stereo', 'joint_stereo', 'dual_channel', 'mono'];\n\n  private static bitrate_index = {\n    0x01: {11: 32, 12: 32, 13: 32, 21: 32, 22: 8, 23: 8},\n    0x02: {11: 64, 12: 48, 13: 40, 21: 48, 22: 16, 23: 16},\n    0x03: {11: 96, 12: 56, 13: 48, 21: 56, 22: 24, 23: 24},\n    0x04: {11: 128, 12: 64, 13: 56, 21: 64, 22: 32, 23: 32},\n    0x05: {11: 160, 12: 80, 13: 64, 21: 80, 22: 40, 23: 40},\n    0x06: {11: 192, 12: 96, 13: 80, 21: 96, 22: 48, 23: 48},\n    0x07: {11: 224, 12: 112, 13: 96, 21: 112, 22: 56, 23: 56},\n    0x08: {11: 256, 12: 128, 13: 112, 21: 128, 22: 64, 23: 64},\n    0x09: {11: 288, 12: 160, 13: 128, 21: 144, 22: 80, 23: 80},\n    0x0A: {11: 320, 12: 192, 13: 160, 21: 160, 22: 96, 23: 96},\n    0x0B: {11: 352, 12: 224, 13: 192, 21: 176, 22: 112, 23: 112},\n    0x0C: {11: 384, 12: 256, 13: 224, 21: 192, 22: 128, 23: 128},\n    0x0D: {11: 416, 12: 320, 13: 256, 21: 224, 22: 144, 23: 144},\n    0x0E: {11: 448, 12: 384, 13: 320, 21: 256, 22: 160, 23: 160}\n  };\n\n  private static sampling_rate_freq_index = {\n    1: {0x00: 44100, 0x01: 48000, 0x02: 32000},\n    2: {0x00: 22050, 0x01: 24000, 0x02: 16000},\n    2.5: {0x00: 11025, 0x01: 12000, 0x02: 8000}\n  };\n\n  // B(20,19): MPEG Audio versionIndex ID\n  public versionIndex: number;\n  // C(18,17): Layer description\n  public layerIndex: number;\n  // D(16): Protection bit\n  public isProtectedByCRC: boolean;\n  // E(15,12): Bitrate index\n  public bitrateIndex: number;\n  // F(11,10): Sampling rate frequency index\n  public sampRateFreqIndex: number;\n  // G(9): Padding bit\n  public padding: boolean;\n  // H(8): Private bit\n  public privateBit: boolean;\n  // I(7,6): Channel Mode\n  public channelModeIndex: number;\n  // J(5,4): Mode extension (Only used in Joint stereo)\n  public modeExtension: number;\n  // K(3): Copyright\n  public isCopyrighted: boolean;\n  // L(2): Original\n  public isOriginalMedia: boolean;\n  // M(3): The original bit indicates, if it is set, that the frame is located on its original media.\n  public emphasis: number;\n\n  public layer: number;\n  public version: number;\n  public channelMode: string;\n  public bitrate: number;\n  public samplingRate: number;\n\n  public constructor(buf, off) {\n    // B(20,19): MPEG Audio versionIndex ID\n    this.versionIndex = common.getBitAllignedNumber(buf, off + 1, 3, 2);\n    // C(18,17): Layer description\n    this.layer = MpegFrameHeader.LayerDescription[common.getBitAllignedNumber(buf, off + 1, 5, 2)];\n    // D(16): Protection bit (if true 16-bit CRC follows header)\n    this.isProtectedByCRC = !common.isBitSet(buf, off + 1, 7);\n    // E(15,12): Bitrate index\n    this.bitrateIndex = common.getBitAllignedNumber(buf, off + 2, 0, 4);\n    // F(11,10): Sampling rate frequency index\n    this.sampRateFreqIndex = common.getBitAllignedNumber(buf, off + 2, 4, 2);\n    // G(9): Padding bit\n    this.padding = common.isBitSet(buf, off + 2, 6);\n    // H(8): Private bit\n    this.privateBit = common.isBitSet(buf, off + 2, 7);\n    // I(7,6): Channel Mode\n    this.channelModeIndex = common.getBitAllignedNumber(buf, off + 3, 0, 2);\n    // J(5,4): Mode extension (Only used in Joint stereo)\n    this.modeExtension = common.getBitAllignedNumber(buf, off + 3, 2, 2);\n    // K(3): Copyright\n    this.isCopyrighted = common.isBitSet(buf, off + 3, 4);\n    // L(2): Original\n    this.isOriginalMedia = common.isBitSet(buf, off + 3, 5);\n    // M(3): The original bit indicates, if it is set, that the frame is located on its original media.\n    this.emphasis = common.getBitAllignedNumber(buf, off + 3, 7, 2);\n\n    this.version = MpegFrameHeader.VersionID[this.versionIndex];\n    if (this.version === null)\n      throw new Error('Invalid MPEG Audio version');\n\n    this.channelMode = MpegFrameHeader.ChannelMode[this.channelModeIndex];\n    this.samplingRate = this.calcSamplingRate();\n\n    const bitrateInKbps = this.calcBitrate();\n    this.bitrate = bitrateInKbps == null ? null : bitrateInKbps * 1000;\n    this.samplingRate = this.calcSamplingRate();\n  }\n\n  public calcDuration(numFrames): number {\n    return Math.round(numFrames * (this.calcSamplesPerFrame() / this.samplingRate));\n  }\n\n  public calcSamplesPerFrame(): number {\n    if (this.layer === 1) return 384;\n    if (this.layer === 2) return 1152;\n    if (this.layer === 3 && this.version === 1) return 1152;\n    if (this.layer === 3 && (this.version === 2 || this.version === 2.5)) return 576;\n  }\n\n  public calculateSideInfoLength(): number {\n    if (this.layer !== 3) return 2;\n    if (this.channelModeIndex === 3) {\n      // mono\n      if (this.version === 1) {\n        return 17;\n      } else if (this.version === 2 || this.version === 2.5) {\n        return 9;\n      }\n    } else {\n      if (this.version === 1) {\n        return 32;\n      } else if (this.version === 2 || this.version === 2.5) {\n        return 17;\n      }\n    }\n  }\n\n  public calcSlotSize(): number {\n    return [null, 4, 1, 1][this.layer];\n  }\n\n  private calcBitrate(): number {\n    if (this.bitrateIndex === 0x00) return null; // free\n    if (this.bitrateIndex === 0x0F) return null; // 'reserved'\n    const mpegVersion: string = this.version.toString() + this.layer;\n    return MpegFrameHeader.bitrate_index[this.bitrateIndex][mpegVersion];\n  }\n\n  private calcSamplingRate(): number {\n    if (this.sampRateFreqIndex === 0x03) return null; // 'reserved'\n    return MpegFrameHeader.sampling_rate_freq_index[this.version][this.sampRateFreqIndex];\n  }\n}\n\n/**\n * MPEG Audio Layer I/II/III\n */\nclass MpegAudioLayer {\n\n  public static FrameHeader = {\n    len: 4,\n\n    get: (buf, off): MpegFrameHeader => {\n      return new MpegFrameHeader(buf, off);\n    }\n  };\n\n  /**\n   * Info Tag\n   * Ref: http://gabriel.mp3-tech.org/mp3infotag.html\n   */\n  public static InfoTag = {\n    len: 140,\n\n    get: (buf, off) => {\n      return {\n        // 4 bytes for Header Tag\n        headerTag: new strtok.StringType(4, 'ascii').get(buf, off),\n        // 4 bytes for HeaderFlags\n        headerFlags: new strtok.BufferType(4).get(buf, off + 4),\n\n        // 100 bytes for entry (NUMTOCENTRIES)\n        // numToCentries: new strtok.BufferType(100).get(buf, off + 8),\n        // FRAME SIZE\n        // frameSize: strtok.UINT32_BE.get(buf, off + 108),\n\n        numFrames: strtok.UINT32_BE.get(buf, off + 8),\n\n        numToCentries: new strtok.BufferType(100).get(buf, off + 108),\n\n        // the number of header APE_HEADER bytes\n        streamSize: strtok.UINT32_BE.get(buf, off + 112),\n        // the number of header data bytes (from original file)\n        vbrScale: strtok.UINT32_BE.get(buf, off + 116),\n\n        /**\n         * LAME Tag, extends the Xing header format\n         * First added in LAME 3.12 for VBR\n         * The modified header is also included in CBR files (effective LAME 3.94), with \"Info\" instead of \"XING\" near the beginning.\n         */\n\n        //  Initial LAME info, e.g.: LAME3.99r\n        encoder: new strtok.StringType(9, 'ascii').get(buf, off + 120),\n        //  Info Tag\n        infoTag: strtok.UINT8.get(buf, off + 129) >> 4,\n        // VBR method\n        vbrMethod: strtok.UINT8.get(buf, off + 129) & 0xf\n      };\n    }\n  };\n\n  public static getVbrCodecProfile(vbrScale: number): string {\n    return 'V' + (100 - vbrScale) / 10;\n  }\n}\n\nexport class MpegParser implements IStreamParser {\n\n  private headerSize: number;\n\n  private frameCount: number = 0;\n  private state: State;\n\n  private audioFrameHeader;\n  private bitrates: number[] = [];\n  private offset: number;\n  private frame_size;\n  private crc: number;\n\n  private stream: NodeJS.ReadableStream;\n  private tagEvent: TagCallback;\n  private done: Done;\n  private readDuration: boolean;\n  private fileSize: GetFileSize;\n  private frameSyncByte2: number;\n\n  private calculateVbrDuration: boolean = false;\n\n  public constructor(headerSize: number) {\n    this.headerSize = headerSize;\n  }\n\n  public parse(stream: NodeJS.ReadableStream, tagEvent: TagCallback, done: Done, readDuration?: boolean, fileSize?: GetFileSize) {\n\n    this.stream = stream;\n    this.tagEvent = tagEvent;\n    this.done = done;\n    this.readDuration = readDuration;\n    this.fileSize = fileSize;\n\n    this.state = State.mpegSearchSync1;\n\n    strtok.parse(stream, (v, cb) => {\n      try {\n        return this.strParse(v, cb);\n      } catch (error) {\n        return done(error);\n      }\n    });\n  }\n\n  public end(callback: TagCallback, done: Done) {\n    if (this.calculateVbrDuration) {\n      this.tagEvent('format', 'duration', this.audioFrameHeader.calcDuration(this.frameCount));\n    }\n    return done();\n  }\n\n  private strParse(v, cb) {\n    if (v === undefined) {\n      return strtok.UINT8;\n    }\n\n    switch (this.state) {\n\n      case State.mpegSearchSync1:\n        this.state = v === MpegFrameHeader.SyncByte1 ? State.mpegSearchSync2 : State.mpegSearchSync1;\n        return strtok.UINT8;\n\n      case State.mpegSearchSync2:\n        if ((v & 0xE0) === 0xE0) {\n          // Synchronized\n          this.state = State.audio_frame_header;\n          this.frameSyncByte2 = v;\n          return new strtok.BufferType(2);\n        } else {\n          this.state = State.mpegSearchSync1;\n          return strtok.UINT8;\n        }\n\n      /* falls through */\n      case State.audio_frame_header: // audio frame header\n\n        // we have found the mm tag at the end of the file, ignore\n        /*\n         if (v.slice(0, 3).toString() === 'TAG') {\n         return done()\n         }*/\n        const buf_frame_header = new Buffer(4);\n        v.copy(buf_frame_header, 2);\n        buf_frame_header[0] = MpegFrameHeader.SyncByte1;\n        buf_frame_header[1] = this.frameSyncByte2;\n        const header = MpegAudioLayer.FrameHeader.get(buf_frame_header, 0);\n\n        if (header.version === null || header.layer === null) {\n          return this.seekFirstAudioFrame();\n        }\n\n        // mp3 files are only found in MPEG1/2 Layer 3\n        if (( header.version !== 1 && header.version !== 2) || header.layer !== 3) {\n          return this.seekFirstAudioFrame();\n        }\n\n        if (header.bitrate == null) {\n          return this.seekFirstAudioFrame();\n        }\n\n        if (header.samplingRate == null) {\n          return this.seekFirstAudioFrame();\n        }\n\n        this.tagEvent('format', 'dataformat', 'mp3');\n        this.tagEvent('format', 'lossless', false);\n        this.tagEvent('format', 'bitrate', header.bitrate);\n        this.tagEvent('format', 'sampleRate', header.samplingRate);\n        this.tagEvent('format', 'numberOfChannels', header.channelMode === 'mono' ? 1 : 2);\n\n        const slot_size = header.calcSlotSize();\n        if (slot_size == null) {\n          this.done(new Error('invalid slot_size'));\n        }\n\n        const samples_per_frame = header.calcSamplesPerFrame();\n        const bps = samples_per_frame / 8.0;\n        const fsize = (bps * header.bitrate / header.samplingRate) +\n          ((header.padding) ? slot_size : 0);\n        this.frame_size = Math.floor(fsize);\n\n        this.audioFrameHeader = header;\n        this.frameCount++;\n        this.bitrates.push(header.bitrate);\n\n        // xtra header only exists in first frame\n        if (this.frameCount === 1) {\n          this.offset = MpegAudioLayer.FrameHeader.len;\n          return this.skipSideInformation(header);\n        }\n\n        if (this.fileSize && this.frameCount === 3) {\n          // the stream is CBR if the first 3 frame bitrates are the same\n          if (this.areAllSame(this.bitrates)) {\n            this.fileSize((size) => {\n              // subtract non audio stream data from duration calculation\n              size = size - this.headerSize;\n              this.tagEvent('format', 'duration', (size * 8) / header.bitrate);\n              // cb(done())\n              return this.done();\n            });\n            return strtok.DEFER;\n          } else if (!this.readDuration) {\n            return this.done();\n          }\n        }\n\n        // once we know the file is VBR attach listener to end of\n        // stream so we can do the duration calculation when we\n        // have counted all the frames\n        if (this.readDuration && this.frameCount === 4) {\n          return this.calculateVbrDuration = true;\n        }\n\n        this.offset = 4;\n        if (header.isProtectedByCRC) {\n          this.state = State.CRC;\n          return strtok.INT16_BE;\n        } else {\n          return this.skipSideInformation(header);\n        }\n\n      case State.CRC:\n        this.offset += 2;\n        this.crc = v;\n        return this.skipSideInformation(this.audioFrameHeader);\n\n      case State.side_information: // side information\n        this.offset += MpegAudioLayer.InfoTag.len;  // 12\n        this.state = State.xtra_info_header;\n        return MpegAudioLayer.InfoTag;\n\n      case State.xtra_info_header: // xtra / info header\n        this.state = State.skip_frame_data;\n        const frameDataLeft = this.frame_size - this.offset;\n\n        let codecProfile: string;\n        switch (v.headerTag) {\n          case 'Info':\n            codecProfile = 'CBR';\n            break;\n          case 'Xing':\n            codecProfile = MpegAudioLayer.getVbrCodecProfile(v.vbrScale);\n            break;\n          case 'Xtra':\n            // ToDo: ???\n            break;\n          default:\n            return new strtok.IgnoreType(frameDataLeft);\n        }\n\n        this.tagEvent('format', 'encoder', v.encoder);\n        this.tagEvent('format', 'codecProfile', codecProfile);\n\n        // frames field is not present\n        if ((v.headerFlags[3] & 0x01) !== 1) {\n          return new strtok.IgnoreType(frameDataLeft);\n        }\n\n        this.tagEvent('format', 'duration', this.audioFrameHeader.calcDuration(v.numFrames));\n        return this.done();\n\n      case State.skip_frame_data: // skip frame data\n        this.state = State.mpegSearchSync1;\n        return strtok.UINT8;\n\n      default:\n        this.done(new Error('Undefined state: ' + this.state));\n    }\n  }\n\n  private skipSideInformation(header: MpegFrameHeader) {\n    const sideinfo_length = header.calculateSideInfoLength();\n\n    this.offset += sideinfo_length;\n    this.state = State.side_information;\n    return new strtok.BufferType(sideinfo_length);\n  }\n\n  private seekFirstAudioFrame(): Token {\n    if (this.frameCount > 0) {\n      return this.done(new Error('expected frame header but was not found'));\n    }\n    this.state = State.mpegSearchSync1;\n    return strtok.UINT8;\n  }\n\n  private areAllSame(array) {\n    const first = array[0];\n    return array.every((element) => {\n      return element === first;\n    });\n  }\n}\n"]}