{"version":3,"file":"vorbis.js","sourceRoot":"","sources":["../src/vorbis.ts"],"names":[],"mappings":";AAAA,gCAAkC;AAElC,IAAY,iBAsBX;AAtBD,WAAY,iBAAiB;IAC3B,2DAAO,CAAA;IACP,uHAAqC,CAAA;IACrC,+EAAiB,CAAA;IACjB,2EAAe,CAAA;IACf,yEAAc,CAAA;IACd,yEAAc,CAAA;IACd,2GAA+B,CAAA;IAC/B,qHAAoC,CAAA;IACpC,iFAAkB,CAAA;IAClB,mEAAW,CAAA;IACX,8EAAgB,CAAA;IAChB,kEAAU,CAAA;IACV,0FAAsB,CAAA;IACtB,sFAAoB,CAAA;IACpB,kFAAkB,CAAA;IAClB,sFAAoB,CAAA;IACpB,sGAA4B,CAAA;IAC5B,8FAAwB,CAAA;IACxB,0EAAc,CAAA;IACd,0FAAsB,CAAA;IACtB,oGAA2B,CAAA;AAC7B,CAAC,EAtBW,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAsB5B;AAaD;IAUE,6BAAY,MAAc;QACxB,IAAI,MAAM,GAAG,CAAC,CAAC;QAEf,IAAI,CAAC,IAAI,GAAG,iBAAiB,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;QAE/D,IAAM,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,IAAI,CAAC,CAAC,CAAC;QAC1D,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,MAAM,IAAI,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,CAAC;QAEtE,IAAM,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,IAAI,OAAO,CAAC,CAAC;QAChE,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,MAAM,IAAI,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,CAAC;QAE3E,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,IAAI,OAAO,CAAC,CAAC;QAC7D,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,IAAI,CAAC,CAAC,CAAC;QACxD,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,IAAI,CAAC,CAAC,CAAC;QAC9D,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,IAAI,CAAC,CAAC,CAAC;QAE/D,IAAM,UAAU,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,IAAI,CAAC,CAAC,CAAC;QAC7D,IAAI,CAAC,IAAI,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE,MAAM,GAAG,UAAU,CAAC,CAAC,CAAC;IACzE,CAAC;IACH,0BAAC;AAAD,CAAC,AA7BD,IA6BC;AAED;IAAA;IASA,CAAC;IAPe,kBAAW,GAAzB,UAA0B,MAAc;QACtC,MAAM,CAAC,IAAI,mBAAmB,CAAC,MAAM,CAAC,CAAC;IACzC,CAAC;IAEa,qBAAc,GAA5B,UAA6B,IAAY;QACvC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IACH,aAAC;AAAD,CAAC,AATD,IASC","sourcesContent":["import * as strtok from 'strtok2';\n\nexport enum VorbisPictureType {\n  'Other',\n  \"32x32 pixels 'file icon' (PNG only)\",\n  'Other file icon',\n  'Cover (front)',\n  'Cover (back)',\n  'Leaflet page',\n  'Media (e.g. lable side of CD)',\n  'Lead artist/lead performer/soloist',\n  'Artist/performer',\n  'Conductor',\n  'Band/Orchestra',\n  'Composer',\n  'Lyricist/text writer',\n  'Recording Location',\n  'During recording',\n  'During performance',\n  'Movie/video screen capture',\n  'A bright coloured fish',\n  'Illustration',\n  'Band/artist logotype',\n  'Publisher/Studio logotype'\n}\n\nexport interface IVorbisPicture {\n  type: string\n  format: string,\n  description: string,\n  width: number,\n  height: number,\n  colour_depth: number,\n  indexed_color: number,\n  data: Buffer;\n}\n\nclass VorbisPictureParser implements IVorbisPicture {\n  public format: string;\n  public description: string;\n  public width: number;\n  public height: number;\n  public colour_depth: number;\n  public indexed_color: number;\n  public data: Buffer;\n  public type: string;\n\n  constructor(buffer: Buffer) {\n    let offset = 0;\n\n    this.type = VorbisPictureType[strtok.UINT32_BE.get(buffer, 0)];\n\n    const mimeLen = strtok.UINT32_BE.get(buffer, offset += 4);\n    this.format = buffer.toString('utf-8', offset += 4, offset + mimeLen);\n\n    const descLen = strtok.UINT32_BE.get(buffer, offset += mimeLen);\n    this.description = buffer.toString('utf-8', offset += 4, offset + descLen);\n\n    this.width = strtok.UINT32_BE.get(buffer, offset += descLen);\n    this.height = strtok.UINT32_BE.get(buffer, offset += 4);\n    this.colour_depth = strtok.UINT32_BE.get(buffer, offset += 4);\n    this.indexed_color = strtok.UINT32_BE.get(buffer, offset += 4);\n\n    const picDataLen = strtok.UINT32_BE.get(buffer, offset += 4);\n    this.data = new Buffer(buffer.slice(offset += 4, offset + picDataLen));\n  }\n}\n\nexport default class Vorbis {\n\n  public static readPicture(buffer: Buffer): IVorbisPicture {\n    return new VorbisPictureParser(buffer);\n  }\n\n  public static getPictureType(type: number): string {\n    return VorbisPictureType[type];\n  }\n}\n"]}