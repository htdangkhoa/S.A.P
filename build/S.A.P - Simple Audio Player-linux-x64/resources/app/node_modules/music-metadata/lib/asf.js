'use strict';
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var equal = require("deep-equal");
var strtok = require("strtok2");
var common_1 = require("./common");
var State = (function () {
    function State(nextState, size) {
        this.nextState = nextState;
        this.size = size;
    }
    return State;
}());
var AsfParser = (function () {
    function AsfParser() {
    }
    AsfParser.getInstance = function () {
        return new AsfParser();
    };
    AsfParser.prototype.parse = function (stream, callback, done) {
        var currentState = AsfParser.startState;
        strtok.parse(stream, function (v, cb) {
            currentState = currentState.parse(callback, v, done);
            return currentState.getExpectedType();
        });
    };
    return AsfParser;
}());
AsfParser.headerType = 'asf';
AsfParser.startState = {
    parse: function () {
        return AsfParser.idState;
    },
    getExpectedType: function () {
        return strtok.DONE; // unreachable statement
    }
};
AsfParser.finishedState = {
    parse: function () {
        return AsfParser.finishedState;
    },
    getExpectedType: function () {
        return strtok.DONE;
    }
};
AsfParser.idState = {
    parse: function (callback, data, done) {
        if (!equal(common_1.default.asfGuidBuf, data)) {
            done(new Error('expected asf header but was not found'));
            return AsfParser.finishedState;
        }
        return new HeaderDataState();
    },
    getExpectedType: function () {
        return new strtok.BufferType(common_1.default.asfGuidBuf.length);
    }
};
var Util = (function () {
    function Util() {
    }
    Util.getParserForAttr = function (i) {
        return Util.attributeParsers[i];
    };
    Util.parseUnicodeAttr = function (buf) {
        return common_1.default.stripNulls(common_1.default.decodeString(buf, 'utf16le'));
    };
    Util.parseByteArrayAttr = function (buf) {
        var newBuf = new Buffer(buf.length);
        buf.copy(newBuf);
        return newBuf;
    };
    Util.parseBoolAttr = function (buf) {
        return Util.parseDWordAttr(buf) === 1;
    };
    Util.parseDWordAttr = function (buf) {
        return buf.readUInt32LE(0);
    };
    Util.parseQWordAttr = function (buf) {
        return Util.readUInt64LE(buf, 0);
    };
    Util.parseWordAttr = function (buf) {
        return buf.readUInt16LE(0);
    };
    Util.readUInt64LE = function (buffer, offset) {
        var high = buffer.slice(offset, offset + 4).readUInt32LE(0);
        var low = buffer.slice(offset + 4, offset + 8).readUInt32LE(0);
        var maxuint32 = Math.pow(2, 32);
        return ((low * maxuint32) + (high >>> 0));
    };
    return Util;
}());
Util.attributeParsers = [
    Util.parseUnicodeAttr,
    Util.parseByteArrayAttr,
    Util.parseBoolAttr,
    Util.parseDWordAttr,
    Util.parseQWordAttr,
    Util.parseWordAttr,
    Util.parseByteArrayAttr
];
var ReadObjectState = (function () {
    function ReadObjectState(size, objectCount) {
        this.size = size;
        this.objectCount = objectCount;
    }
    ReadObjectState.stateByGuid = function (guidBuf) {
        for (var _i = 0, _a = ReadObjectState.guidStates; _i < _a.length; _i++) {
            var guidState = _a[_i];
            if (equal(guidState.guid, guidBuf)) {
                return guidState;
            }
        }
        return null;
    };
    ReadObjectState.prototype.parse = function (callback, data, done) {
        var guid = data.slice(0, 16);
        var size = Util.readUInt64LE(data, 16);
        this.objectCount -= 1;
        this.size -= size;
        var nextState = (this.objectCount <= 0) ? AsfParser.finishedState : this;
        var guidState = ReadObjectState.stateByGuid(guid);
        return guidState ? guidState.getState(nextState, size - 24) : new IgnoreObjectState(nextState, size - 24);
    };
    ReadObjectState.prototype.getExpectedType = function () {
        return new strtok.BufferType(24);
    };
    return ReadObjectState;
}());
ReadObjectState.guidStates = [
    {
        guid: new Buffer([
            0xA1, 0xDC, 0xAB, 0x8C, 0x47, 0xA9, 0xCF, 0x11,
            0x8E, 0xE4, 0x00, 0xC0, 0x0C, 0x20, 0x53, 0x65
        ]),
        getState: function (nextState, size) {
            return new FilePropertiesObject(nextState, size);
        }
    },
    // ContentDescriptionObject
    {
        guid: new Buffer([
            0x33, 0x26, 0xB2, 0x75, 0x8E, 0x66, 0xCF, 0x11,
            0xA6, 0xD9, 0x00, 0xAA, 0x00, 0x62, 0xCE, 0x6C
        ]),
        getState: function (nextState, size) {
            return new ContentDescriptionObjectState(nextState, size);
        }
    },
    // ExtendedContentDescriptionObject
    {
        guid: new Buffer([
            0x40, 0xA4, 0xD0, 0xD2, 0x07, 0xE3, 0xD2, 0x11,
            0x97, 0xF0, 0x00, 0xA0, 0xC9, 0x5E, 0xA8, 0x50
        ]),
        getState: function (nextState, size) {
            return new ExtendedContentDescriptionObjectState(nextState, size);
        }
    }
];
var HeaderDataState = (function () {
    function HeaderDataState() {
    }
    HeaderDataState.prototype.parse = function (callback, data, done) {
        var size = Util.readUInt64LE(data, 0);
        var objectCount = data.readUInt32LE(8);
        return new ReadObjectState(size, objectCount);
    };
    HeaderDataState.prototype.getExpectedType = function () {
        // 8 bytes size
        // 4 bytes object count
        // 2 bytes ignore
        return new strtok.BufferType(14);
    };
    return HeaderDataState;
}());
var IgnoreObjectState = (function (_super) {
    __extends(IgnoreObjectState, _super);
    function IgnoreObjectState(nextState, size) {
        return _super.call(this, nextState, size) || this;
    }
    IgnoreObjectState.prototype.parse = function (callback, data, done) {
        if (this.nextState === AsfParser.finishedState) {
            done();
        }
        return this.nextState;
    };
    IgnoreObjectState.prototype.getExpectedType = function () {
        return new strtok.IgnoreType(this.size);
    };
    return IgnoreObjectState;
}(State));
var ContentDescriptionObjectState = (function (_super) {
    __extends(ContentDescriptionObjectState, _super);
    function ContentDescriptionObjectState(nextState, size) {
        return _super.call(this, nextState, size) || this;
    }
    ContentDescriptionObjectState.prototype.parse = function (callback, data, done) {
        var lengths = [
            data.readUInt16LE(0),
            data.readUInt16LE(2),
            data.readUInt16LE(4),
            data.readUInt16LE(6),
            data.readUInt16LE(8)
        ];
        var pos = 10;
        for (var i = 0; i < ContentDescriptionObjectState.contentDescTags.length; i += 1) {
            var tagName = ContentDescriptionObjectState.contentDescTags[i];
            var length_1 = lengths[i];
            var end = pos + length_1;
            if (length_1 > 0) {
                var value = Util.parseUnicodeAttr(data.slice(pos, end));
                callback(AsfParser.headerType, tagName, value);
            }
            pos = end;
        }
        if (this.nextState === AsfParser.finishedState) {
            done();
        }
        return this.nextState;
    };
    ContentDescriptionObjectState.prototype.getExpectedType = function () {
        return new strtok.BufferType(this.size);
    };
    return ContentDescriptionObjectState;
}(State));
ContentDescriptionObjectState.guid = new Buffer([
    0x33, 0x26, 0xB2, 0x75, 0x8E, 0x66, 0xCF, 0x11,
    0xA6, 0xD9, 0x00, 0xAA, 0x00, 0x62, 0xCE, 0x6C
]);
ContentDescriptionObjectState.contentDescTags = ['Title', 'Author', 'Copyright', 'Description', 'Rating'];
var ExtendedContentDescriptionObjectState = (function (_super) {
    __extends(ExtendedContentDescriptionObjectState, _super);
    function ExtendedContentDescriptionObjectState(nextState, size) {
        return _super.call(this, nextState, size) || this;
    }
    ExtendedContentDescriptionObjectState.prototype.parse = function (callback, data, done) {
        var attrCount = data.readUInt16LE(0);
        var pos = 2;
        for (var i = 0; i < attrCount; i += 1) {
            var nameLen = data.readUInt16LE(pos);
            pos += 2;
            var name_1 = Util.parseUnicodeAttr(data.slice(pos, pos + nameLen));
            pos += nameLen;
            var valueType = data.readUInt16LE(pos);
            pos += 2;
            var valueLen = data.readUInt16LE(pos);
            pos += 2;
            var value = data.slice(pos, pos + valueLen);
            pos += valueLen;
            var parseAttr = Util.getParserForAttr(valueType);
            if (!parseAttr) {
                done(new Error('unexpected value headerType: ' + valueType));
                return AsfParser.finishedState;
            }
            var attr = parseAttr(value);
            callback(AsfParser.headerType, name_1, attr);
        }
        if (this.nextState === AsfParser.finishedState) {
            done();
        }
        return this.nextState;
    };
    ExtendedContentDescriptionObjectState.prototype.getExpectedType = function () {
        return new strtok.BufferType(this.size);
    };
    return ExtendedContentDescriptionObjectState;
}(State));
var FilePropertiesObject = (function (_super) {
    __extends(FilePropertiesObject, _super);
    function FilePropertiesObject(nextState, size) {
        return _super.call(this, nextState, size) || this;
    }
    FilePropertiesObject.prototype.parse = function (callback, data, done) {
        // in miliseconds
        var playDuration = Util.parseQWordAttr(data.slice(40, 48)) / 10000;
        callback('format', 'duration', playDuration / 1000);
        if (this.nextState === AsfParser.finishedState) {
            done();
        }
        return this.nextState;
    };
    FilePropertiesObject.prototype.getExpectedType = function () {
        return new strtok.BufferType(this.size);
    };
    return FilePropertiesObject;
}(State));
module.exports = AsfParser.getInstance();
//# sourceMappingURL=asf.js.map