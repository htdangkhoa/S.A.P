{"version":3,"file":"vorbis.js","sourceRoot":"","sources":["../../src/vorbis.ts"],"names":[],"mappings":";AAAA,IAAY,MAAM,WAAM,SAAS,CAAC,CAAA;AAElC,WAAY,iBAAiB;IAC3B,2DAAO,CAAA;IACP,uHAAqC,CAAA;IACrC,+EAAiB,CAAA;IACjB,2EAAe,CAAA;IACf,yEAAc,CAAA;IACd,yEAAc,CAAA;IACd,2GAA+B,CAAA;IAC/B,qHAAoC,CAAA;IACpC,iFAAkB,CAAA;IAClB,mEAAW,CAAA;IACX,8EAAgB,CAAA;IAChB,kEAAU,CAAA;IACV,0FAAsB,CAAA;IACtB,sFAAoB,CAAA;IACpB,kFAAkB,CAAA;IAClB,sFAAoB,CAAA;IACpB,sGAA4B,CAAA;IAC5B,8FAAwB,CAAA;IACxB,0EAAc,CAAA;IACd,0FAAsB,CAAA;IACtB,oGAA2B,CAAA;AAC7B,CAAC,EAtBW,yBAAiB,KAAjB,yBAAiB,QAsB5B;AAtBD,IAAY,iBAAiB,GAAjB,yBAsBX,CAAA;AAaD;IAUE,6BAAY,MAAc;QACxB,IAAI,MAAM,GAAG,CAAC,CAAC;QAEf,IAAI,CAAC,IAAI,GAAG,iBAAiB,CAAC,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC;QAE/D,IAAI,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,IAAI,CAAC,CAAC,CAAC;QACxD,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,MAAM,IAAI,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,CAAC;QAEtE,IAAI,OAAO,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,IAAI,OAAO,CAAC,CAAC;QAC9D,IAAI,CAAC,WAAW,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,EAAE,MAAM,IAAI,CAAC,EAAE,MAAM,GAAG,OAAO,CAAC,CAAC;QAE3E,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,IAAI,OAAO,CAAC,CAAC;QAC7D,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,IAAI,CAAC,CAAC,CAAC;QACxD,IAAI,CAAC,YAAY,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,IAAI,CAAC,CAAC,CAAC;QAC9D,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,IAAI,CAAC,CAAC,CAAC;QAE/D,IAAI,UAAU,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC,MAAM,EAAE,MAAM,IAAI,CAAC,CAAC,CAAC;QAC3D,IAAI,CAAC,IAAI,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,IAAI,CAAC,EAAE,MAAM,GAAG,UAAU,CAAC,CAAC,CAAC;IACzE,CAAC;IACH,0BAAC;AAAD,CAAC,AA7BD,IA6BC;AAED;IAAA;IASA,CAAC;IAPe,kBAAW,GAAzB,UAA2B,MAAc;QACvC,MAAM,CAAC,IAAI,mBAAmB,CAAC,MAAM,CAAC,CAAC;IACzC,CAAC;IAEa,qBAAc,GAA5B,UAA6B,IAAY;QACvC,MAAM,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC;IACjC,CAAC;IACH,aAAC;AAAD,CAAC,AATD,IASC;AATD;wBASC,CAAA","sourcesContent":["import * as strtok from 'strtok2';\r\n\r\nexport enum VorbisPictureType {\r\n  'Other',\r\n  \"32x32 pixels 'file icon' (PNG only)\",\r\n  'Other file icon',\r\n  'Cover (front)',\r\n  'Cover (back)',\r\n  'Leaflet page',\r\n  'Media (e.g. lable side of CD)',\r\n  'Lead artist/lead performer/soloist',\r\n  'Artist/performer',\r\n  'Conductor',\r\n  'Band/Orchestra',\r\n  'Composer',\r\n  'Lyricist/text writer',\r\n  'Recording Location',\r\n  'During recording',\r\n  'During performance',\r\n  'Movie/video screen capture',\r\n  'A bright coloured fish',\r\n  'Illustration',\r\n  'Band/artist logotype',\r\n  'Publisher/Studio logotype'\r\n}\r\n\r\nexport interface IVorbisPicture {\r\n  type: string\r\n  format: string,\r\n  description: string,\r\n  width: number,\r\n  height: number,\r\n  colour_depth: number,\r\n  indexed_color: number,\r\n  data: Buffer;\r\n}\r\n\r\nclass VorbisPictureParser implements IVorbisPicture {\r\n  public format: string;\r\n  public description: string;\r\n  public width: number;\r\n  public height: number;\r\n  public colour_depth: number;\r\n  public indexed_color: number;\r\n  public data: Buffer;\r\n  public type: string;\r\n\r\n  constructor(buffer: Buffer) {\r\n    let offset = 0;\r\n\r\n    this.type = VorbisPictureType[strtok.UINT32_BE.get(buffer, 0)];\r\n\r\n    let mimeLen = strtok.UINT32_BE.get(buffer, offset += 4);\r\n    this.format = buffer.toString('utf-8', offset += 4, offset + mimeLen);\r\n\r\n    let descLen = strtok.UINT32_BE.get(buffer, offset += mimeLen);\r\n    this.description = buffer.toString('utf-8', offset += 4, offset + descLen);\r\n\r\n    this.width = strtok.UINT32_BE.get(buffer, offset += descLen);\r\n    this.height = strtok.UINT32_BE.get(buffer, offset += 4);\r\n    this.colour_depth = strtok.UINT32_BE.get(buffer, offset += 4);\r\n    this.indexed_color = strtok.UINT32_BE.get(buffer, offset += 4);\r\n\r\n    let picDataLen = strtok.UINT32_BE.get(buffer, offset += 4);\r\n    this.data = new Buffer(buffer.slice(offset += 4, offset + picDataLen));\r\n  }\r\n}\r\n\r\nexport default class Vorbis {\r\n\r\n  public static readPicture (buffer: Buffer): IVorbisPicture {\r\n    return new VorbisPictureParser(buffer);\r\n  }\r\n\r\n  public static getPictureType(type: number): string {\r\n    return VorbisPictureType[type];\r\n  }\r\n}\r\n"]}