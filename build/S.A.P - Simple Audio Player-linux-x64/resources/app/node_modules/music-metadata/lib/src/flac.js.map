{"version":3,"file":"flac.js","sourceRoot":"","sources":["../../src/flac.ts"],"names":[],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nimport * as strtok from 'strtok2';\r\nimport common from './common';\r\nimport {IStreamParser, TagCallback} from './parser';\r\nimport {HeaderType} from './tagmap';\r\nimport vorbis from './vorbis';\r\n\r\ninterface IState {\r\n\r\n  parse (callback, data, done): IState;\r\n\r\n  getExpectedType ();\r\n}\r\n\r\nclass FlacParser implements IStreamParser {\r\n\r\n  public static headerType: HeaderType = 'vorbis';\r\n\r\n  public static getInstance(): FlacParser {\r\n    return new FlacParser();\r\n  }\r\n\r\n  public parse(stream, callback: TagCallback, done?, readDuration?, fileSize?) {\r\n    let currentState: IState = startState;\r\n\r\n    strtok.parse(stream, (v, cb) => {\r\n      currentState = currentState.parse(callback, v, done);\r\n      return currentState.getExpectedType();\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * FLAC supports up to 128 kinds of metadata blocks; currently the following are defined:\r\n * ref: https://xiph.org/flac/format.html#metadata_block\r\n */\r\nenum BlockType {\r\n  STREAMINFO = 0,\r\n  PADDING = 1,\r\n  APPLICATION = 2,\r\n  SEEKTABLE = 3,\r\n  VORBIS_COMMENT = 4,\r\n  CUESHEET = 5,\r\n  PICTURE = 6\r\n}\r\n\r\n/**\r\n * METADATA_BLOCK_DATA\r\n * Ref: https://xiph.org/flac/format.html#metadata_block_streaminfo\r\n */\r\ninterface IBlockHeader {\r\n  // Last-metadata-block flag: '1' if this block is the last metadata block before the audio blocks, '0' otherwise.\r\n  lastBlock: boolean,\r\n  // BLOCK_TYPE\r\n  type: BlockType,\r\n  // Length (in bytes) of metadata to follow (does not include the size of the METADATA_BLOCK_HEADER)\r\n  length: number;\r\n}\r\n\r\n/**\r\n * METADATA_BLOCK_DATA\r\n * Ref: https://xiph.org/flac/format.html#metadata_block_streaminfo\r\n */\r\ninterface IBlockStreamInfo {\r\n  minimumBlockSize: number,\r\n  // The maximum block size (in samples) used in the stream.\r\n  // (Minimum blocksize == maximum blocksize) implies a fixed-blocksize stream.\r\n  maximumBlockSize: number,\r\n  // The minimum frame size (in bytes) used in the stream.\r\n  // May be 0 to imply the value is not known.\r\n  minimumFrameSize: number,\r\n  // The maximum frame size (in bytes) used in the stream.\r\n  // May be 0 to imply the value is not known.\r\n  maximumFrameSize: number,\r\n  // Sample rate in Hz. Though 20 bits are available,\r\n  // the maximum sample rate is limited by the structure of frame headers to 655350Hz.\r\n  // Also, a value of 0 is invalid.\r\n  sampleRate: number,\r\n  // probably slower: sampleRate: common.getBitAllignedNumber(buf, off + 10, 0, 20),\r\n  // (number of channels)-1. FLAC supports from 1 to 8 channels\r\n  channels: number,\r\n  // bits per sample)-1.\r\n  // FLAC supports from 4 to 32 bits per sample. Currently the reference encoder and decoders only support up to 24 bits per sample.\r\n  bitsPerSample: number,\r\n  // Total samples in stream.\r\n  // 'Samples' means inter-channel sample, i.e. one second of 44.1Khz audio will have 44100 samples regardless of the number of channels.\r\n  // A value of zero here means the number of total samples is unknown.\r\n  totalSamples: number,\r\n  // the MD5 hash of the file (see notes for usage... it's a littly tricky)\r\n  fileMD5: Buffer;\r\n}\r\n\r\nclass Metadata {\r\n\r\n  public static BlockHeader = {\r\n    len: 4,\r\n\r\n    get: (buf: Buffer, off: number): IBlockHeader => {\r\n      return {\r\n        lastBlock: common.strtokBITSET.get(buf, off, 7),\r\n        type: common.getBitAllignedNumber(buf, off, 1, 7),\r\n        length: common.strtokUINT24_BE.get(buf, off + 1)\r\n      };\r\n    }\r\n  };\r\n\r\n  /**\r\n   * METADATA_BLOCK_DATA\r\n   * Ref: https://xiph.org/flac/format.html#metadata_block_streaminfo\r\n   */\r\n  public static BlockStreamInfo = {\r\n    len: 34,\r\n\r\n    get: (buf: Buffer, off: number): IBlockStreamInfo => {\r\n      return {\r\n        // The minimum block size (in samples) used in the stream.\r\n        minimumBlockSize: strtok.UINT16_BE.get(buf, off),\r\n        // The maximum block size (in samples) used in the stream.\r\n        // (Minimum blocksize == maximum blocksize) implies a fixed-blocksize stream.\r\n        maximumBlockSize: strtok.UINT16_BE.get(buf, off + 2) / 1000,\r\n        // The minimum frame size (in bytes) used in the stream.\r\n        // May be 0 to imply the value is not known.\r\n        minimumFrameSize: strtok.UINT24_BE.get(buf, off + 4),\r\n        // The maximum frame size (in bytes) used in the stream.\r\n        // May be 0 to imply the value is not known.\r\n        maximumFrameSize: strtok.UINT24_BE.get(buf, off + 7),\r\n        // Sample rate in Hz. Though 20 bits are available,\r\n        // the maximum sample rate is limited by the structure of frame headers to 655350Hz.\r\n        // Also, a value of 0 is invalid.\r\n        sampleRate: common.strtokUINT24_BE.get(buf, off + 10) >> 4,\r\n        // probably slower: sampleRate: common.getBitAllignedNumber(buf, off + 10, 0, 20),\r\n        // (number of channels)-1. FLAC supports from 1 to 8 channels\r\n        channels: common.getBitAllignedNumber(buf, off + 12, 4, 3) + 1,\r\n        // bits per sample)-1.\r\n        // FLAC supports from 4 to 32 bits per sample. Currently the reference encoder and decoders only support up to 24 bits per sample.\r\n        bitsPerSample: common.getBitAllignedNumber(buf, off + 12, 7, 5) + 1,\r\n        // Total samples in stream.\r\n        // 'Samples' means inter-channel sample, i.e. one second of 44.1Khz audio will have 44100 samples regardless of the number of channels.\r\n        // A value of zero here means the number of total samples is unknown.\r\n        totalSamples: common.getBitAllignedNumber(buf, off + 13, 4, 36),\r\n        // the MD5 hash of the file (see notes for usage... it's a littly tricky)\r\n        fileMD5: new strtok.BufferType(16).get(buf, off + 18)\r\n      };\r\n    }\r\n  };\r\n}\r\n\r\nclass DataDecoder {\r\n\r\n  private data: Buffer;\r\n  private offset: number;\r\n\r\n  constructor(data: Buffer) {\r\n    this.data = data;\r\n    this.offset = 0;\r\n  }\r\n\r\n  public readInt32(): number {\r\n    let value = strtok.UINT32_LE.get(this.data, this.offset);\r\n    this.offset += 4;\r\n    return value;\r\n  }\r\n\r\n  public readStringUtf8(): string {\r\n    let len = this.readInt32();\r\n    let value = this.data.toString('utf8', this.offset, this.offset + len);\r\n    this.offset += len;\r\n    return value;\r\n  }\r\n}\r\n\r\n// ToDo: same in ASF\r\nlet finishedState: IState = {\r\n\r\n  parse: (callback) => {\r\n    return finishedState; // ToDo: correct?\r\n  },\r\n\r\n  getExpectedType: () => {\r\n    return strtok.DONE;\r\n  }\r\n};\r\n\r\nclass BlockDataState implements IState {\r\n\r\n  private type: BlockType;\r\n  private length: number;\r\n  private nextStateFactory;\r\n\r\n  constructor(type, length, nextStateFactory) {\r\n    this.type = type;\r\n    this.length = length;\r\n    this.nextStateFactory = nextStateFactory;\r\n  }\r\n\r\n  public parse(callback, data) {\r\n    switch (this.type) {\r\n      case BlockType.STREAMINFO: // METADATA_BLOCK_STREAMINFO\r\n        let blockStreamInfo = <IBlockStreamInfo> data;\r\n        // Ref: https://xiph.org/flac/format.html#metadata_block_streaminfo\r\n        callback('format', 'dataformat', 'flac');\r\n        callback('format', 'lossless', true);\r\n        callback('format', 'headerType', FlacParser.headerType);\r\n        callback('format', 'numberOfChannels', blockStreamInfo.channels);\r\n        callback('format', 'bitsPerSample', blockStreamInfo.bitsPerSample);\r\n        callback('format', 'sampleRate', blockStreamInfo.sampleRate);\r\n        let duration = blockStreamInfo.totalSamples / blockStreamInfo.sampleRate;\r\n        callback('format', 'duration', blockStreamInfo.totalSamples / blockStreamInfo.sampleRate);\r\n        // callback('format', 'bitrate', fileSize / duration) // ToDo: exclude meta-data\r\n        break;\r\n\r\n      case BlockType.VORBIS_COMMENT: // METADATA_BLOCK_VORBIS_COMMENT\r\n        let decoder = new DataDecoder(data);\r\n        decoder.readStringUtf8(); // vendor (skip)\r\n        let commentListLength = decoder.readInt32();\r\n        for (let i = 0; i < commentListLength; i++) {\r\n          let comment = decoder.readStringUtf8();\r\n          let split = comment.split('=');\r\n          callback(FlacParser.headerType, split[0].toUpperCase(), split[1]);\r\n        }\r\n        break;\r\n\r\n      case BlockType.PICTURE: // METADATA_BLOCK_PICTURE\r\n        let picture = vorbis.readPicture(data);\r\n        callback(FlacParser.headerType, 'METADATA_BLOCK_PICTURE', picture);\r\n        break;\r\n    }\r\n    return this.nextStateFactory();\r\n  }\r\n\r\n  public getExpectedType() {\r\n    switch (this.type) {\r\n      case 0:\r\n        return Metadata.BlockStreamInfo;\r\n      default:\r\n        return new strtok.BufferType(this.length);\r\n    }\r\n  }\r\n}\r\n\r\nlet blockHeaderState: IState = {\r\n  parse: (callback, data, done) => {\r\n    let header = <IBlockHeader> data;\r\n    let followingStateFactory = header.lastBlock ? () => {\r\n      done();\r\n      return finishedState;\r\n    } : () => {\r\n      return blockHeaderState;\r\n    };\r\n\r\n    return new BlockDataState(header.type, header.length, followingStateFactory);\r\n  },\r\n  getExpectedType: () => {\r\n    return Metadata.BlockHeader;\r\n  }\r\n};\r\n\r\nlet idState: IState = {\r\n\r\n  parse: (callback, data, done) => {\r\n    if (data.toString() !== 'fLaC') {\r\n      done(new Error('expected flac header but was not found'));\r\n    }\r\n    return blockHeaderState;\r\n  },\r\n\r\n  getExpectedType: () => {\r\n    return new strtok.BufferType(4);\r\n  }\r\n};\r\n\r\nlet startState: IState = {\r\n\r\n  parse: (callback) => {\r\n    return idState;\r\n  },\r\n\r\n  getExpectedType: () => {\r\n    return strtok.DONE;\r\n  }\r\n};\r\n\r\nmodule.exports = FlacParser.getInstance();\r\n"]}