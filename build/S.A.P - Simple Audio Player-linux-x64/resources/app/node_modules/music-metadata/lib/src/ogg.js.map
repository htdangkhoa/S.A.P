{"version":3,"file":"ogg.js","sourceRoot":"","sources":["../../src/ogg.ts"],"names":[],"mappings":"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","sourcesContent":["'use strict';\r\nimport * as events from 'events';\r\nimport * as strtok from 'strtok2';\r\nimport common from './common';\r\nimport vorbis from './vorbis';\r\nimport ReadableStream = NodeJS.ReadableStream;\r\nimport {IStreamParser, TagCallback} from './parser';\r\n\r\ninterface IFormatInfo  {\r\n  version: number,\r\n  channelMode: number,\r\n  sampleRate: number,\r\n  bitrateMax: number,\r\n  bitrateNominal: number,\r\n  bitrateMin: number;\r\n}\r\n\r\nenum State {\r\n  header = 0,\r\n  segments = 1,\r\n  pageData = 2\r\n}\r\n\r\nenum MetaState {\r\n  type = 0,\r\n  vendorLength = 1,\r\n  vendorString = 2,\r\n  userCommentListLength = 3,\r\n  commentLength = 4,\r\n  comment = 5,\r\n  vorbisInfo = 6\r\n}\r\n\r\ninterface IOggHeader {\r\n  type: string,\r\n  version: number,\r\n  packet_flag: number,\r\n  pcm_sample_pos: number,\r\n  stream_serial_num: number,\r\n  page_number: number,\r\n  check_sum: number,\r\n  segments: number;\r\n}\r\n\r\nclass OggParser implements IStreamParser {\r\n\r\n  public static Header = {\r\n    len: 27,\r\n\r\n    get: (buf, off): IOggHeader => {\r\n      return {\r\n        type: new strtok.StringType(4, 'ascii').get(buf, off + 0),\r\n        version: buf.readUInt8(off + 4),\r\n        packet_flag:  buf.readUInt8(off + 5),\r\n        pcm_sample_pos: (buf.readUInt32LE(off + 10) << 32) + buf.readUInt32LE(off + 6),\r\n        stream_serial_num: strtok.UINT32_LE.get(buf, off + 14),\r\n        page_number: strtok.UINT32_LE.get(buf, off + 18),\r\n        check_sum: strtok.UINT32_LE.get(buf, off + 22),\r\n        segments: buf.readUInt8(off + 26)\r\n      };\r\n    }\r\n  };\r\n\r\n  public static getInstance(): OggParser {\r\n    return new OggParser();\r\n  }\r\n\r\n  private static headerType = 'vorbis';\r\n\r\n  private formatInfo: IFormatInfo;\r\n  private header: IOggHeader;\r\n\r\n  public parse(stream, callback, done, readDuration, fileSize) {\r\n    let innerStream = new events.EventEmitter();\r\n\r\n    let pageLength = 0;\r\n    let stop = false;\r\n\r\n    // top level parser that handles the parsing of pages\r\n    strtok.parse(stream, (v, cb) => {\r\n      if (!v) {\r\n        cb.state = State.header;\r\n        return OggParser.Header;\r\n      }\r\n\r\n      if (stop) {\r\n        return done();\r\n      }\r\n\r\n      switch (cb.state) {\r\n        case State.header: // header\r\n          this.header = v;\r\n\r\n          if (this.header.type !== 'OggS') {\r\n            return done(new Error('expected ogg header but was not found'));\r\n          }\r\n          cb.pageNumber = this.header.page_number;\r\n          cb.state++;\r\n          return new strtok.BufferType(this.header.segments);\r\n\r\n        case State.segments: // segments\r\n          pageLength = common.sum(v);\r\n          cb.state++;\r\n          return new strtok.BufferType(pageLength);\r\n\r\n        case State.pageData: // page data\r\n          innerStream.emit('data', new Buffer(v));\r\n          cb.state = State.header;\r\n          return OggParser.Header;\r\n\r\n        default:\r\n          done(new Error('Illegal state'));\r\n      }\r\n    });\r\n\r\n    // Second level parser that handles the parsing of metadata.\r\n    // The top level parser emits data that this parser should\r\n    // handle.\r\n    strtok.parse(innerStream, (v, cb) => {\r\n      if (!v) {\r\n        cb.commentsRead = 0;\r\n        cb.state = MetaState.type;\r\n        return new strtok.BufferType(7);\r\n      }\r\n\r\n      switch (cb.state) {\r\n        case MetaState.type: // type\r\n          if (v.toString() === '\\x01vorbis') {\r\n            cb.state = MetaState.vorbisInfo;\r\n            return new strtok.BufferType(23);\r\n          } else if (v.toString() === '\\x03vorbis') {\r\n            cb.state++;\r\n            return strtok.UINT32_LE;\r\n          } else {\r\n            return done(new Error('expected vorbis header but found something else'));\r\n          }\r\n\r\n        case MetaState.vendorLength: // vendor length\r\n          cb.state++;\r\n          return new strtok.BufferType(v);\r\n\r\n        case MetaState.vendorString: // vendor string\r\n          cb.state++;\r\n          return new strtok.BufferType(4);\r\n\r\n        case MetaState.userCommentListLength: // user comment list length\r\n          cb.commentsLength = v.readUInt32LE(0);\r\n          // no metadata, stop parsing\r\n          if (cb.commentsLength === 0) return strtok.DONE;\r\n          cb.state++;\r\n          return strtok.UINT32_LE;\r\n\r\n        case MetaState.commentLength: // comment length\r\n          cb.state++;\r\n          return new strtok.BufferType(v);\r\n\r\n        case MetaState.comment: // comment\r\n          cb.commentsRead++;\r\n          v = v.toString();\r\n          let idx = v.indexOf('=');\r\n          let key = v.slice(0, idx).toUpperCase();\r\n          let value = v.slice(idx + 1);\r\n\r\n          if (key === 'METADATA_BLOCK_PICTURE') {\r\n            value = vorbis.readPicture(new Buffer(value, 'base64'));\r\n          }\r\n\r\n          callback(OggParser.headerType, key, value);\r\n\r\n          if (cb.commentsRead === cb.commentsLength) {\r\n            // if we don't want to read the duration\r\n            // then tell the parent stream to stop\r\n            stop = !readDuration;\r\n            return strtok.DONE;\r\n          }\r\n\r\n          cb.state--; // back to comment length\r\n          return strtok.UINT32_LE;\r\n\r\n        case MetaState.vorbisInfo: // vorbis info\r\n          this.formatInfo = {\r\n            version: v.readUInt32LE(0),\r\n            channelMode: v.readUInt8(4),\r\n            sampleRate: v.readUInt32LE(5),\r\n            bitrateMax: v.readUInt32LE(9),\r\n            bitrateNominal: v.readUInt32LE(13),\r\n            bitrateMin: v.readUInt32LE(17)\r\n          };\r\n\r\n          callback('format', 'headerType', OggParser.headerType);\r\n          callback('format', 'sampleRate', this.formatInfo.sampleRate);\r\n          callback('format', 'bitrate', this.formatInfo.bitrateNominal);\r\n          callback('format', 'numberOfChannels', this.formatInfo.channelMode);\r\n\r\n          cb.state = MetaState.type;\r\n          return new strtok.BufferType(7);\r\n\r\n        default:\r\n          done(new Error('Illegal metadata-state: ' + cb.state));\r\n          return strtok.DONE;\r\n      }\r\n    });\r\n  }\r\n\r\n  public end(callback, done) {\r\n    callback('format', 'duration', this.header.pcm_sample_pos / this.formatInfo.sampleRate);\r\n    done();\r\n  }\r\n}\r\n\r\nmodule.exports = OggParser.getInstance();\r\n"]}