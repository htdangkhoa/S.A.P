{"version":3,"file":"windows1252decoder.js","sourceRoot":"","sources":["../src/windows1252decoder.ts"],"names":[],"mappings":";AAAA;IAAA;IA+CA,CAAC;IA7Ce,yBAAM,GAApB,UAAqB,MAAkB;QACrC,IAAI,GAAG,GAAG,EAAE,CAAC;QACb,GAAG,CAAC,CAAC,IAAM,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC;YACvB,EAAE,CAAC,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC7B,GAAG,IAAI,kBAAkB,CAAC,iBAAiB,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YAC/F,CAAC;QACH,CAAC;QACD,MAAM,CAAC,GAAG,CAAC;IACb,CAAC;IAYc,0BAAO,GAAtB,UAAuB,CAAC,EAAE,GAAG,EAAE,GAAG;QAChC,MAAM,CAAC,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,CAAC;IAC9B,CAAC;IAEc,oCAAiB,GAAhC,UAAiC,EAAU;QACzC,EAAE,CAAC,CAAC,EAAE,IAAI,MAAM,CAAC,CAAC,CAAC;YACjB,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QACjC,CAAC;QAAC,IAAI,CAAC,CAAC;YACN,EAAE,IAAI,OAAO,CAAC;YACd,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,EAAE,IAAI,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,GAAG,KAAK,CAAC,GAAG,MAAM,CAAC,CAAC;QACzE,CAAC;IACH,CAAC;IAEc,oCAAiB,GAAhC,UAAiC,IAAY;QAC3C,EAAE,CAAC,CAAC,kBAAkB,CAAC,OAAO,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;YACjD,MAAM,CAAC,IAAI,CAAC;QACd,CAAC;QAED,IAAM,SAAS,GAAG,kBAAkB,CAAC,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC,CAAC;QAC9D,EAAE,CAAC,CAAC,SAAS,KAAK,IAAI,CAAC,CAAC,CAAC;YACvB,MAAM,KAAK,CAAC,qBAAqB,CAAC,CAAC;QACrC,CAAC;QAED,MAAM,CAAC,SAAS,CAAC;IACnB,CAAC;IACH,yBAAC;AAAD,CAAC,AA/CD;AAYiB,8BAAW,GAAG,CAAC,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG;IACxF,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG;IAC5E,IAAI,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG;IAChzE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,CAAC;AApB/B,gDAAkB;;AAiD/B,kBAAe,kBAAkB,CAAC,MAAM,CAAC","sourcesContent":["export class Windows1292Decoder {\n\n  public static decode(buffer: Uint8Array): string {\n    let str = '';\n    for (const i in buffer) {\n      if (buffer.hasOwnProperty(i)) {\n        str += Windows1292Decoder.codePointToString(Windows1292Decoder.singleByteDecoder(buffer[i]));\n      }\n    }\n    return str;\n  }\n\n  private static windows1252 = [8364, 129, 8218, 402, 8222, 8230, 8224, 8225, 710, 8240, 352,\n    8249, 338, 141, 381, 143, 144, 8216, 8217, 8220, 8221, 8226, 8211, 8212, 732,\n    8482, 353, 8250, 339, 157, 382, 376, 160, 161, 162, 163, 164, 165, 166, 167, 168,\n    169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184,\n    185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200,\n    201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216,\n    217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232,\n    233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247,\n    248, 249, 250, 251, 252, 253, 254, 255];\n\n  private static inRange(a, min, max): boolean {\n    return min <= a && a <= max;\n  }\n\n  private static codePointToString(cp: number): string {\n    if (cp <= 0xFFFF) {\n      return String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      return String.fromCharCode((cp >> 10) + 0xD800, (cp & 0x3FF) + 0xDC00);\n    }\n  }\n\n  private static singleByteDecoder(bite: number): number {\n    if (Windows1292Decoder.inRange(bite, 0x00, 0x7F)) {\n      return bite;\n    }\n\n    const codePoint = Windows1292Decoder.windows1252[bite - 0x80];\n    if (codePoint === null) {\n      throw Error('invaliding encoding');\n    }\n\n    return codePoint;\n  }\n}\n\nexport default Windows1292Decoder.decode;\n"]}